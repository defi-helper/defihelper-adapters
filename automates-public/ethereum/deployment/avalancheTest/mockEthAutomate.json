{
  "address": "0xF9bfA344c2c25ecdFBd208872FaffA9105E44503",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_info",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "protocolFee",
          "type": "int256"
        }
      ],
      "name": "ProtocolFeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Run",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "__protocolFee",
          "type": "int256"
        }
      ],
      "name": "changeProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "info",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staking",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gasFee",
          "type": "uint256"
        }
      ],
      "name": "run",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "contract EthStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x27a55cf4ca2c94ca29ea760134400cdab960fe9ad2e5d2495e49e7a22adf4f5d",
  "receipt": {
    "to": null,
    "from": "0x9403932015576D13Fb26B135ed7a35d5d95C18d4",
    "contractAddress": "0xF9bfA344c2c25ecdFBd208872FaffA9105E44503",
    "transactionIndex": 0,
    "gasUsed": "2284977",
    "logsBloom": "0x
    "blockHash": "0xd3d1c76413b1065cecef159a92360fa6c94e3f3b52bde1ea247a55737e2e22f3",
    "transactionHash": "0x27a55cf4ca2c94ca29ea760134400cdab960fe9ad2e5d2495e49e7a22adf4f5d",
    "logs": [],
    "blockNumber": 3089200,
    "cumulativeGasUsed": "2284977",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDdfbffEfacB7598Ad995D327Ea4fF2D42aCF7b77"
  ],
  "solcInputHash": "3fe8b7eef3b480190444ef49d98cd9da",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_info\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"protocolFee\",\"type\":\"int256\"}],\"name\":\"ProtocolFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Run\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"__protocolFee\",\"type\":\"int256\"}],\"name\":\"changeProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"info\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasFee\",\"type\":\"uint256\"}],\"name\":\"run\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract EthStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"changeProtocolFee(int256)\":{\"params\":{\"__protocolFee\":\"New protocol fee.\"}},\"protocolFee()\":{\"returns\":{\"_0\":\"Current protocol fee.\"}},\"transfer(address,address,uint256)\":{\"params\":{\"amount\":\"Transferred amount of tokens.\",\"recipient\":\"Token recipient address.\",\"token\":\"The address of the token to be transferred.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changeProtocolFee(int256)\":{\"notice\":\"Change protocol fee.\"},\"info()\":{\"notice\":\"Returns address of Storage contract.\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"pause()\":{\"notice\":\"Pause contract.\"},\"paused()\":{\"notice\":\"Returns true if the contract is paused, and false otherwise.\"},\"transfer(address,address,uint256)\":{\"notice\":\"Transfer ERC20 token to recipient.\"},\"unpause()\":{\"notice\":\"Unpause contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"automates/mock/EthAutomate.automate.sol\":\"EthAutomate\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"automates/mock/EthAutomate.automate.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./EthStaking.sol\\\";\\nimport \\\"../utils/DFH/Automate.sol\\\";\\n\\ncontract EthAutomate is Automate {\\n  EthStaking public staking;\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  constructor(address _info) Automate(_info) {}\\n\\n  event Run(uint256 amount);\\n\\n  function init(address _staking) external initializer {\\n    staking = EthStaking(_staking);\\n  }\\n\\n  function deposit() external onlyOwner {\\n    IERC20 token = IERC20(staking.stakingToken());\\n    uint256 balance = token.balanceOf(address(this));\\n    token.approve(address(staking), balance);\\n    staking.deposit(balance);\\n  }\\n\\n  function refund() external onlyOwner {\\n    staking.withdraw(staking.balanceOf(address(this)));\\n    IERC20 token = IERC20(staking.stakingToken());\\n    token.transfer(owner(), token.balanceOf(address(this)));\\n  }\\n\\n  function run(uint256 gasFee) external bill(gasFee, \\\"MockEthAutomate\\\") {\\n    uint256 balance = staking.balanceOf(address(this));\\n    staking.withdraw(balance);\\n    \\n    IERC20 token = IERC20(staking.stakingToken());\\n    token.approve(address(staking), balance);\\n    staking.deposit(balance);\\n\\n    emit Run(balance);\\n  }\\n}\\n\",\"keccak256\":\"0x8ce9125560ce3b2fd401080793208cae9cfb0c82cecf4aea149b8a802929741a\",\"license\":\"BSD-3-Clause\"},\"automates/mock/EthStaking.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract EthStaking {\\n  IERC20 public stakingToken;\\n\\n  mapping(address => uint256) public balanceOf;\\n\\n  uint256 public totalSupply;\\n\\n  event Deposit(address account, uint256 amount);\\n\\n  event Withdraw(address account, uint256 amount);\\n\\n  constructor(address _stakingToken) {\\n    stakingToken = IERC20(_stakingToken);\\n  }\\n\\n  function deposit(uint256 amount) external {\\n    stakingToken.transferFrom(msg.sender, address(this), amount);\\n    balanceOf[msg.sender] += amount;\\n    totalSupply += amount;\\n\\n    emit Deposit(msg.sender, amount);\\n  }\\n\\n  function withdraw(uint256 amount) external {\\n    balanceOf[msg.sender] -= amount;\\n    totalSupply -= amount;\\n    stakingToken.transfer(msg.sender, amount);\\n\\n    emit Withdraw(msg.sender, amount);\\n  }\\n}\\n\",\"keccak256\":\"0x3870768064105542f91a5a83f7f15be48bc411d13d8319eb4e92e945890b7a1c\",\"license\":\"BSD-3-Clause\"},\"automates/utils/DFH/Automate.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./proxy/ERC1167.sol\\\";\\nimport \\\"./IStorage.sol\\\";\\nimport \\\"./IBalance.sol\\\";\\n\\n// solhint-disable avoid-tx-origin\\nabstract contract Automate {\\n  using ERC1167 for address;\\n\\n  /// @notice Storage contract address.\\n  address internal _info;\\n\\n  /// @notice Contract owner.\\n  address internal _owner;\\n\\n  /// @notice Is contract paused.\\n  bool internal _paused;\\n\\n  /// @notice Protocol fee in USD (-1 if value in global storage).\\n  int256 internal _protocolFee;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  event ProtocolFeeChanged(int256 protocolFee);\\n\\n  constructor(address __info) {\\n    _info = __info;\\n    _owner = tx.origin;\\n    _protocolFee = -1;\\n  }\\n\\n  /**\\n   * @notice Returns address of Storage contract.\\n   */\\n  function info() public view returns (address) {\\n    address impl = address(this).implementation();\\n    if (impl == address(this)) return _info;\\n\\n    return Automate(impl).info();\\n  }\\n\\n  /// @dev Modifier to protect an initializer function from being invoked twice.\\n  modifier initializer() {\\n    if (_owner == address(0)) {\\n      _owner = tx.origin;\\n      _protocolFee = -1;\\n    } else {\\n      require(_owner == msg.sender, \\\"Automate: caller is not the owner\\\");\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(_owner == msg.sender, \\\"Automate: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) external onlyOwner {\\n    require(address(this).implementation() == address(this), \\\"Automate: change the owner failed\\\");\\n\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the pauser.\\n   */\\n  modifier onlyPauser() {\\n    if (address(this).implementation() == address(this)) {\\n      address pauser = IStorage(info()).getAddress(keccak256(\\\"DFH:Pauser\\\"));\\n      require(msg.sender == _owner || msg.sender == pauser, \\\"Automate: caller is not the pauser\\\");\\n    } else {\\n      require(msg.sender == _owner, \\\"Automate: caller is not the pauser\\\");\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Returns true if the contract is paused, and false otherwise.\\n   */\\n  function paused() public view returns (bool) {\\n    address impl = address(this).implementation();\\n    if (impl == address(this)) return _paused;\\n\\n    return _paused || Automate(impl).paused();\\n  }\\n\\n  /**\\n   * @dev Throws if contract paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused(), \\\"Automate: not paused\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Throws if contract unpaused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused(), \\\"Automate: paused\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Pause contract.\\n   */\\n  function pause() external onlyPauser whenNotPaused {\\n    _paused = true;\\n  }\\n\\n  /**\\n   * @notice Unpause contract.\\n   */\\n  function unpause() external onlyPauser whenPaused {\\n    _paused = false;\\n  }\\n\\n  /**\\n   * @return Current protocol fee.\\n   */\\n  function protocolFee() public view returns (uint256) {\\n    address impl = address(this).implementation();\\n    if (impl != address(this) && _protocolFee < 0) {\\n      return Automate(impl).protocolFee();\\n    }\\n\\n    IStorage __info = IStorage(info());\\n    uint256 feeOnUSD = _protocolFee < 0 ? __info.getUint(keccak256(\\\"DFH:Fee:Automate\\\")) : uint256(_protocolFee);\\n    if (feeOnUSD == 0) return 0;\\n\\n    (, int256 price, , , ) = AggregatorV3Interface(__info.getAddress(keccak256(\\\"DFH:Fee:PriceFeed\\\"))).latestRoundData();\\n    require(price > 0, \\\"Automate: invalid price\\\");\\n\\n    return (feeOnUSD * 1e18) / uint256(price);\\n  }\\n\\n  /**\\n   * @notice Change protocol fee.\\n   * @param __protocolFee New protocol fee.\\n   */\\n  function changeProtocolFee(int256 __protocolFee) external {\\n    address impl = address(this).implementation();\\n    require(\\n      (impl == address(this) ? _owner : Automate(impl).owner()) == msg.sender,\\n      \\\"Automate::changeProtocolFee: caller is not the protocol owner\\\"\\n    );\\n\\n    _protocolFee = __protocolFee;\\n    emit ProtocolFeeChanged(__protocolFee);\\n  }\\n\\n  /**\\n   * @dev Claim fees from owner.\\n   * @param gasFee Claim gas fee.\\n   * @param operation Claim description.\\n   */\\n  function _bill(uint256 gasFee, string memory operation) internal whenNotPaused returns (uint256) {\\n    address account = owner(); // gas optimisation\\n    if (tx.origin == account) return 0; // free if called by the owner\\n\\n    IStorage __info = IStorage(info());\\n\\n    address balance = __info.getAddress(keccak256(\\\"DFH:Contract:Balance\\\"));\\n    require(balance != address(0), \\\"Automate::_bill: balance contract not found\\\");\\n\\n    return IBalance(balance).claim(account, gasFee, protocolFee(), operation);\\n  }\\n\\n  /**\\n   * @dev Claim fees from owner.\\n   * @param gasFee Claim gas fee.\\n   * @param operation Claim description.\\n   */\\n  modifier bill(uint256 gasFee, string memory operation) {\\n    _bill(gasFee, operation);\\n    _;\\n  }\\n\\n  /**\\n   * @notice Transfer ERC20 token to recipient.\\n   * @param token The address of the token to be transferred.\\n   * @param recipient Token recipient address.\\n   * @param amount Transferred amount of tokens.\\n   */\\n  function transfer(\\n    address token,\\n    address recipient,\\n    uint256 amount\\n  ) external onlyOwner {\\n    IERC20(token).transfer(recipient, amount);\\n  }\\n}\\n\",\"keccak256\":\"0x10279ab2a8c124a24f924c1dbfd9e218c471cd9f87e33b318768c94c4c6262c9\",\"license\":\"BSD-3-Clause\"},\"automates/utils/DFH/IBalance.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\ninterface IBalance {\\n  function claim(\\n    address account,\\n    uint256 gasFee,\\n    uint256 protocolFee,\\n    string memory description\\n  ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xaa996ebfd96fa304ff8c51b240819815ea9cb1b27a250319c57cac7b597be6cc\",\"license\":\"BSD-3-Clause\"},\"automates/utils/DFH/IStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\ninterface IStorage {\\n  function getBytes(bytes32 key) external view returns (bytes memory);\\n\\n  function getBool(bytes32 key) external view returns (bool);\\n\\n  function getUint(bytes32 key) external view returns (uint256);\\n\\n  function getInt(bytes32 key) external view returns (int256);\\n\\n  function getAddress(bytes32 key) external view returns (address);\\n\\n  function getString(bytes32 key) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xc3f6f2d80c27a1d5abbf6f6df55c96a315cdf7887b589c9ef5d45d036c56aa76\",\"license\":\"BSD-3-Clause\"},\"automates/utils/DFH/proxy/ERC1167.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable no-inline-assembly\\nlibrary ERC1167 {\\n  bytes public constant CLONE =\\n    hex\\\"363d3d373d3d3d363d73bebebebebebebebebebebebebebebebebebebebe5af43d82803e903d91602b57fd5bf3\\\";\\n\\n  /**\\n   * @notice Make new proxy contract.\\n   * @param impl Address prototype contract.\\n   * @return proxy Address new proxy contract.\\n   */\\n  function clone(address impl) external returns (address proxy) {\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(ptr, 0x14), shl(0x60, impl))\\n      mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n      proxy := create(0, ptr, 0x37)\\n    }\\n    require(proxy != address(0), \\\"ERC1167: create failed\\\");\\n  }\\n\\n  /**\\n   * @notice Returns address of prototype contract for proxy.\\n   * @param proxy Address proxy contract.\\n   * @return impl Address prototype contract (current contract address if not proxy).\\n   */\\n  function implementation(address proxy) external view returns (address impl) {\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(proxy)\\n    }\\n\\n    impl = proxy;\\n    if (size <= 45 && size >= 41) {\\n      bool matches = true;\\n      uint256 i;\\n\\n      bytes memory code;\\n      assembly {\\n        code := mload(0x40)\\n        mstore(0x40, add(code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n        mstore(code, size)\\n        extcodecopy(proxy, add(code, 0x20), 0, size)\\n      }\\n      for (i = 0; matches && i < 9; i++) {\\n        matches = code[i] == CLONE[i];\\n      }\\n      for (i = 0; matches && i < 15; i++) {\\n        if (i == 4) {\\n          matches = code[code.length - i - 1] == bytes1(uint8(CLONE[45 - i - 1]) - uint8(45 - size));\\n        } else {\\n          matches = code[code.length - i - 1] == CLONE[45 - i - 1];\\n        }\\n      }\\n      if (code[9] != bytes1(0x73 - uint8(45 - size))) {\\n        matches = false;\\n      }\\n      uint256 forwardedToBuffer;\\n      if (matches) {\\n        assembly {\\n          forwardedToBuffer := mload(add(code, 30))\\n        }\\n        forwardedToBuffer &= (0x1 << (20 * 8)) - 1;\\n        impl = address(uint160(forwardedToBuffer >> ((45 - size) * 8)));\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x766f43e1832068a2a230f9bc19db0b190f638c4b0acb2dc689da07d43a45675f\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200282638038062002826833981016040819052620000349162000069565b600080546001600160a01b039092166001600160a01b031992831617905560018054909116321790556000196002556200009b565b6000602082840312156200007c57600080fd5b81516001600160a01b03811681146200009457600080fd5b9392505050565b61277b80620000ab6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638da5cb5b1161008c578063b0e21e8a11610066578063b0e21e8a146101ca578063beabacc8146101e0578063d0e30db0146101f3578063f2fde38b146101fb57600080fd5b80638da5cb5b146101865780639742b5c3146101a4578063a444f5e9146101b757600080fd5b80634cf088d9116100c85780634cf088d91461013e578063590e1ae31461015e5780635c975abb146101665780638456cb591461017e57600080fd5b806319ab453c146100ef578063370158ea146101045780633f4ba83a14610136575b600080fd5b6101026100fd3660046124e5565b61020e565b005b61010c610371565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6101026104d3565b60035461010c9073ffffffffffffffffffffffffffffffffffffffff1681565b610102610865565b61016e610c28565b604051901515815260200161012d565b610102610dad565b60015473ffffffffffffffffffffffffffffffffffffffff1661010c565b6101026101b2366004612589565b611157565b6101026101c5366004612589565b611391565b6101d261170f565b60405190815260200161012d565b6101026101ee366004612526565b611b1c565b610102611c71565b6101026102093660046124e5565b611f95565b60015473ffffffffffffffffffffffffffffffffffffffff1661027e57600180547fffffffffffffffffffffffff000000000000000000000000000000000000000016321790557fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60025561032a565b60015473ffffffffffffffffffffffffffffffffffffffff16331461032a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6040517f6b88071800000000000000000000000000000000000000000000000000000000815230600482015260009081907362cA8Ec7e7a6852D93Fb4e4b5583d6D7b2c10b7F90636b8807189060240160206040518083038186803b1580156103d957600080fd5b505af41580156103ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104119190612509565b905073ffffffffffffffffffffffffffffffffffffffff811630141561044f57505060005473ffffffffffffffffffffffffffffffffffffffff1690565b8073ffffffffffffffffffffffffffffffffffffffff1663370158ea6040518163ffffffff1660e01b815260040160206040518083038186803b15801561049557600080fd5b505afa1580156104a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cd9190612509565b91505090565b6040517f6b8807180000000000000000000000000000000000000000000000000000000081523060048201819052907362cA8Ec7e7a6852D93Fb4e4b5583d6D7b2c10b7F90636b8807189060240160206040518083038186803b15801561053957600080fd5b505af415801561054d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105719190612509565b73ffffffffffffffffffffffffffffffffffffffff161415610726576000610597610371565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527f689d13d8ed8ef1027633ba26e7121121cf427434450a529548f19bf175974395600482015273ffffffffffffffffffffffffffffffffffffffff91909116906321f8a7219060240160206040518083038186803b15801561061e57600080fd5b505afa158015610632573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106569190612509565b60015490915073ffffffffffffffffffffffffffffffffffffffff1633148061069457503373ffffffffffffffffffffffffffffffffffffffff8216145b610720576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f65720000000000000000000000000000000000000000000000000000000000006064820152608401610321565b506107cd565b60015473ffffffffffffffffffffffffffffffffffffffff1633146107cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f65720000000000000000000000000000000000000000000000000000000000006064820152608401610321565b6107d5610c28565b61083b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4175746f6d6174653a206e6f74207061757365640000000000000000000000006044820152606401610321565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff169055565b60015473ffffffffffffffffffffffffffffffffffffffff16331461090c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610321565b6003546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff90911690632e1a7d4d9082906370a082319060240160206040518083038186803b15801561097d57600080fd5b505afa158015610991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b591906125a2565b6040518263ffffffff1660e01b81526004016109d391815260200190565b600060405180830381600087803b1580156109ed57600080fd5b505af1158015610a01573d6000803e3d6000fd5b505050506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166372f702f36040518163ffffffff1660e01b815260040160206040518083038186803b158015610a6f57600080fd5b505afa158015610a83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa79190612509565b90508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb610ae460015473ffffffffffffffffffffffffffffffffffffffff1690565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8516906370a082319060240160206040518083038186803b158015610b4957600080fd5b505afa158015610b5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8191906125a2565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381600087803b158015610bec57600080fd5b505af1158015610c00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c249190612567565b5050565b6040517f6b88071800000000000000000000000000000000000000000000000000000000815230600482015260009081907362cA8Ec7e7a6852D93Fb4e4b5583d6D7b2c10b7F90636b8807189060240160206040518083038186803b158015610c9057600080fd5b505af4158015610ca4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc89190612509565b905073ffffffffffffffffffffffffffffffffffffffff8116301415610d0b57505060015474010000000000000000000000000000000000000000900460ff1690565b60015474010000000000000000000000000000000000000000900460ff16806104cd57508073ffffffffffffffffffffffffffffffffffffffff16635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d7557600080fd5b505afa158015610d89573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cd9190612567565b6040517f6b8807180000000000000000000000000000000000000000000000000000000081523060048201819052907362cA8Ec7e7a6852D93Fb4e4b5583d6D7b2c10b7F90636b8807189060240160206040518083038186803b158015610e1357600080fd5b505af4158015610e27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4b9190612509565b73ffffffffffffffffffffffffffffffffffffffff161415611000576000610e71610371565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527f689d13d8ed8ef1027633ba26e7121121cf427434450a529548f19bf175974395600482015273ffffffffffffffffffffffffffffffffffffffff91909116906321f8a7219060240160206040518083038186803b158015610ef857600080fd5b505afa158015610f0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f309190612509565b60015490915073ffffffffffffffffffffffffffffffffffffffff16331480610f6e57503373ffffffffffffffffffffffffffffffffffffffff8216145b610ffa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f65720000000000000000000000000000000000000000000000000000000000006064820152608401610321565b506110a7565b60015473ffffffffffffffffffffffffffffffffffffffff1633146110a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f65720000000000000000000000000000000000000000000000000000000000006064820152608401610321565b6110af610c28565b15611116576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4175746f6d6174653a20706175736564000000000000000000000000000000006044820152606401610321565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000179055565b6040517f6b8807180000000000000000000000000000000000000000000000000000000081523060048201526000907362cA8Ec7e7a6852D93Fb4e4b5583d6D7b2c10b7F90636b8807189060240160206040518083038186803b1580156111bd57600080fd5b505af41580156111d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f59190612509565b90503373ffffffffffffffffffffffffffffffffffffffff82163014611298578173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561125b57600080fd5b505afa15801561126f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112939190612509565b6112b2565b60015473ffffffffffffffffffffffffffffffffffffffff165b73ffffffffffffffffffffffffffffffffffffffff1614611355576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603d60248201527f4175746f6d6174653a3a6368616e676550726f746f636f6c4665653a2063616c60448201527f6c6572206973206e6f74207468652070726f746f636f6c206f776e65720000006064820152608401610321565b60028290556040518281527f3c1d43943224e49d951ce8295a5c8332b517083b3f89bed50feae2cb39caebb59060200160405180910390a15050565b806040518060400160405280600f81526020017f4d6f636b4574684175746f6d61746500000000000000000000000000000000008152506113d282826121f4565b506003546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b15801561143d57600080fd5b505afa158015611451573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147591906125a2565b6003546040517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081526004810183905291925073ffffffffffffffffffffffffffffffffffffffff1690632e1a7d4d90602401600060405180830381600087803b1580156114e257600080fd5b505af11580156114f6573d6000803e3d6000fd5b505050506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166372f702f36040518163ffffffff1660e01b815260040160206040518083038186803b15801561156457600080fd5b505afa158015611578573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159c9190612509565b6003546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201526024810185905291925082169063095ea7b390604401602060405180830381600087803b15801561161257600080fd5b505af1158015611626573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164a9190612567565b506003546040517fb6b55f250000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff9091169063b6b55f2590602401600060405180830381600087803b1580156116b757600080fd5b505af11580156116cb573d6000803e3d6000fd5b505050507f94f5b294c14bd89ee21c4c869a1013a487c7c8d0611568bb6757a14ad739f6bd8260405161170091815260200190565b60405180910390a15050505050565b6040517f6b88071800000000000000000000000000000000000000000000000000000000815230600482015260009081907362cA8Ec7e7a6852D93Fb4e4b5583d6D7b2c10b7F90636b8807189060240160206040518083038186803b15801561177757600080fd5b505af415801561178b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117af9190612509565b905073ffffffffffffffffffffffffffffffffffffffff811630148015906117d957506000600254125b1561185c578073ffffffffffffffffffffffffffffffffffffffff1663b0e21e8a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561182457600080fd5b505afa158015611838573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cd91906125a2565b6000611866610371565b90506000806002541261187b57600254611938565b6040517fbd02d0f50000000000000000000000000000000000000000000000000000000081527fa93d95f96a5de25d7a41ddf1f5e8d45cfc929c4838163cf011dab4043a4a40d5600482015273ffffffffffffffffffffffffffffffffffffffff83169063bd02d0f59060240160206040518083038186803b15801561190057600080fd5b505afa158015611914573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193891906125a2565b905080611949576000935050505090565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527f65c90423fe7c880476633a7e36521740f87199d233dc56eb4ca6643eb76f605f600482015260009073ffffffffffffffffffffffffffffffffffffffff8416906321f8a7219060240160206040518083038186803b1580156119d157600080fd5b505afa1580156119e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a099190612509565b73ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015611a4e57600080fd5b505afa158015611a62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8691906125bb565b50505091505060008113611af6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4175746f6d6174653a20696e76616c69642070726963650000000000000000006044820152606401610321565b80611b0983670de0b6b3a76400006126e5565b611b1391906126aa565b94505050505090565b60015473ffffffffffffffffffffffffffffffffffffffff163314611bc3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610321565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526024820183905284169063a9059cbb90604401602060405180830381600087803b158015611c3357600080fd5b505af1158015611c47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6b9190612567565b50505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314611d18576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610321565b600354604080517f72f702f3000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff16916372f702f3916004808301926020929190829003018186803b158015611d8357600080fd5b505afa158015611d97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dbb9190612509565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b158015611e2657600080fd5b505afa158015611e3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5e91906125a2565b6003546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201526024810183905291925083169063095ea7b390604401602060405180830381600087803b158015611ed457600080fd5b505af1158015611ee8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f0c9190612567565b506003546040517fb6b55f250000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff9091169063b6b55f2590602401600060405180830381600087803b158015611f7957600080fd5b505af1158015611f8d573d6000803e3d6000fd5b505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff16331461203c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610321565b6040517f6b8807180000000000000000000000000000000000000000000000000000000081523060048201819052907362cA8Ec7e7a6852D93Fb4e4b5583d6D7b2c10b7F90636b8807189060240160206040518083038186803b1580156120a257600080fd5b505af41580156120b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120da9190612509565b73ffffffffffffffffffffffffffffffffffffffff161461217d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a206368616e676520746865206f776e6572206661696c6560448201527f64000000000000000000000000000000000000000000000000000000000000006064820152608401610321565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006121fe610c28565b15612265576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4175746f6d6174653a20706175736564000000000000000000000000000000006044820152606401610321565b600061228660015473ffffffffffffffffffffffffffffffffffffffff1690565b90503273ffffffffffffffffffffffffffffffffffffffff821614156122b05760009150506124c0565b60006122ba610371565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527fe78c16c6d839536d3155985aab4e9c6013c8c3d446054bcebc48612f359d81f5600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906321f8a7219060240160206040518083038186803b15801561234557600080fd5b505afa158015612359573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237d9190612509565b905073ffffffffffffffffffffffffffffffffffffffff8116612422576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f4175746f6d6174653a3a5f62696c6c3a2062616c616e636520636f6e7472616360448201527f74206e6f7420666f756e640000000000000000000000000000000000000000006064820152608401610321565b8073ffffffffffffffffffffffffffffffffffffffff1663e578a225848861244861170f565b896040518563ffffffff1660e01b8152600401612468949392919061260b565b602060405180830381600087803b15801561248257600080fd5b505af1158015612496573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ba91906125a2565b93505050505b92915050565b805169ffffffffffffffffffff811681146124e057600080fd5b919050565b6000602082840312156124f757600080fd5b813561250281612749565b9392505050565b60006020828403121561251b57600080fd5b815161250281612749565b60008060006060848603121561253b57600080fd5b833561254681612749565b9250602084013561255681612749565b929592945050506040919091013590565b60006020828403121561257957600080fd5b8151801515811461250257600080fd5b60006020828403121561259b57600080fd5b5035919050565b6000602082840312156125b457600080fd5b5051919050565b600080600080600060a086880312156125d357600080fd5b6125dc866124c6565b94506020860151935060408601519250606086015191506125ff608087016124c6565b90509295509295909350565b73ffffffffffffffffffffffffffffffffffffffff8516815260006020858184015284604084015260806060840152835180608085015260005b818110156126615785810183015185820160a001528201612645565b8181111561267357600060a083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160a0019695505050505050565b6000826126e0577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612744577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500290565b73ffffffffffffffffffffffffffffffffffffffff8116811461276b57600080fd5b5056fea164736f6c6343000806000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638da5cb5b1161008c578063b0e21e8a11610066578063b0e21e8a146101ca578063beabacc8146101e0578063d0e30db0146101f3578063f2fde38b146101fb57600080fd5b80638da5cb5b146101865780639742b5c3146101a4578063a444f5e9146101b757600080fd5b80634cf088d9116100c85780634cf088d91461013e578063590e1ae31461015e5780635c975abb146101665780638456cb591461017e57600080fd5b806319ab453c146100ef578063370158ea146101045780633f4ba83a14610136575b600080fd5b6101026100fd3660046124e5565b61020e565b005b61010c610371565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6101026104d3565b60035461010c9073ffffffffffffffffffffffffffffffffffffffff1681565b610102610865565b61016e610c28565b604051901515815260200161012d565b610102610dad565b60015473ffffffffffffffffffffffffffffffffffffffff1661010c565b6101026101b2366004612589565b611157565b6101026101c5366004612589565b611391565b6101d261170f565b60405190815260200161012d565b6101026101ee366004612526565b611b1c565b610102611c71565b6101026102093660046124e5565b611f95565b60015473ffffffffffffffffffffffffffffffffffffffff1661027e57600180547fffffffffffffffffffffffff000000000000000000000000000000000000000016321790557fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60025561032a565b60015473ffffffffffffffffffffffffffffffffffffffff16331461032a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6040517f6b880718000000000000000000000000000000000000000000000000000000008152306004820152600090819073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b1580156103d957600080fd5b505af41580156103ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104119190612509565b905073ffffffffffffffffffffffffffffffffffffffff811630141561044f57505060005473ffffffffffffffffffffffffffffffffffffffff1690565b8073ffffffffffffffffffffffffffffffffffffffff1663370158ea6040518163ffffffff1660e01b815260040160206040518083038186803b15801561049557600080fd5b505afa1580156104a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cd9190612509565b91505090565b6040517f6b88071800000000000000000000000000000000000000000000000000000000815230600482018190529073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b15801561053957600080fd5b505af415801561054d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105719190612509565b73ffffffffffffffffffffffffffffffffffffffff161415610726576000610597610371565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527f689d13d8ed8ef1027633ba26e7121121cf427434450a529548f19bf175974395600482015273ffffffffffffffffffffffffffffffffffffffff91909116906321f8a7219060240160206040518083038186803b15801561061e57600080fd5b505afa158015610632573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106569190612509565b60015490915073ffffffffffffffffffffffffffffffffffffffff1633148061069457503373ffffffffffffffffffffffffffffffffffffffff8216145b610720576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f65720000000000000000000000000000000000000000000000000000000000006064820152608401610321565b506107cd565b60015473ffffffffffffffffffffffffffffffffffffffff1633146107cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f65720000000000000000000000000000000000000000000000000000000000006064820152608401610321565b6107d5610c28565b61083b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4175746f6d6174653a206e6f74207061757365640000000000000000000000006044820152606401610321565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff169055565b60015473ffffffffffffffffffffffffffffffffffffffff16331461090c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610321565b6003546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff90911690632e1a7d4d9082906370a082319060240160206040518083038186803b15801561097d57600080fd5b505afa158015610991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b591906125a2565b6040518263ffffffff1660e01b81526004016109d391815260200190565b600060405180830381600087803b1580156109ed57600080fd5b505af1158015610a01573d6000803e3d6000fd5b505050506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166372f702f36040518163ffffffff1660e01b815260040160206040518083038186803b158015610a6f57600080fd5b505afa158015610a83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa79190612509565b90508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb610ae460015473ffffffffffffffffffffffffffffffffffffffff1690565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8516906370a082319060240160206040518083038186803b158015610b4957600080fd5b505afa158015610b5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8191906125a2565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381600087803b158015610bec57600080fd5b505af1158015610c00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c249190612567565b5050565b6040517f6b880718000000000000000000000000000000000000000000000000000000008152306004820152600090819073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b158015610c9057600080fd5b505af4158015610ca4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc89190612509565b905073ffffffffffffffffffffffffffffffffffffffff8116301415610d0b57505060015474010000000000000000000000000000000000000000900460ff1690565b60015474010000000000000000000000000000000000000000900460ff16806104cd57508073ffffffffffffffffffffffffffffffffffffffff16635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d7557600080fd5b505afa158015610d89573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cd9190612567565b6040517f6b88071800000000000000000000000000000000000000000000000000000000815230600482018190529073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b158015610e1357600080fd5b505af4158015610e27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4b9190612509565b73ffffffffffffffffffffffffffffffffffffffff161415611000576000610e71610371565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527f689d13d8ed8ef1027633ba26e7121121cf427434450a529548f19bf175974395600482015273ffffffffffffffffffffffffffffffffffffffff91909116906321f8a7219060240160206040518083038186803b158015610ef857600080fd5b505afa158015610f0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f309190612509565b60015490915073ffffffffffffffffffffffffffffffffffffffff16331480610f6e57503373ffffffffffffffffffffffffffffffffffffffff8216145b610ffa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f65720000000000000000000000000000000000000000000000000000000000006064820152608401610321565b506110a7565b60015473ffffffffffffffffffffffffffffffffffffffff1633146110a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f65720000000000000000000000000000000000000000000000000000000000006064820152608401610321565b6110af610c28565b15611116576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4175746f6d6174653a20706175736564000000000000000000000000000000006044820152606401610321565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000179055565b6040517f6b88071800000000000000000000000000000000000000000000000000000000815230600482015260009073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b1580156111bd57600080fd5b505af41580156111d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f59190612509565b90503373ffffffffffffffffffffffffffffffffffffffff82163014611298578173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561125b57600080fd5b505afa15801561126f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112939190612509565b6112b2565b60015473ffffffffffffffffffffffffffffffffffffffff165b73ffffffffffffffffffffffffffffffffffffffff1614611355576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603d60248201527f4175746f6d6174653a3a6368616e676550726f746f636f6c4665653a2063616c60448201527f6c6572206973206e6f74207468652070726f746f636f6c206f776e65720000006064820152608401610321565b60028290556040518281527f3c1d43943224e49d951ce8295a5c8332b517083b3f89bed50feae2cb39caebb59060200160405180910390a15050565b806040518060400160405280600f81526020017f4d6f636b4574684175746f6d61746500000000000000000000000000000000008152506113d282826121f4565b506003546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b15801561143d57600080fd5b505afa158015611451573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147591906125a2565b6003546040517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081526004810183905291925073ffffffffffffffffffffffffffffffffffffffff1690632e1a7d4d90602401600060405180830381600087803b1580156114e257600080fd5b505af11580156114f6573d6000803e3d6000fd5b505050506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166372f702f36040518163ffffffff1660e01b815260040160206040518083038186803b15801561156457600080fd5b505afa158015611578573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159c9190612509565b6003546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201526024810185905291925082169063095ea7b390604401602060405180830381600087803b15801561161257600080fd5b505af1158015611626573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164a9190612567565b506003546040517fb6b55f250000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff9091169063b6b55f2590602401600060405180830381600087803b1580156116b757600080fd5b505af11580156116cb573d6000803e3d6000fd5b505050507f94f5b294c14bd89ee21c4c869a1013a487c7c8d0611568bb6757a14ad739f6bd8260405161170091815260200190565b60405180910390a15050505050565b6040517f6b880718000000000000000000000000000000000000000000000000000000008152306004820152600090819073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b15801561177757600080fd5b505af415801561178b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117af9190612509565b905073ffffffffffffffffffffffffffffffffffffffff811630148015906117d957506000600254125b1561185c578073ffffffffffffffffffffffffffffffffffffffff1663b0e21e8a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561182457600080fd5b505afa158015611838573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cd91906125a2565b6000611866610371565b90506000806002541261187b57600254611938565b6040517fbd02d0f50000000000000000000000000000000000000000000000000000000081527fa93d95f96a5de25d7a41ddf1f5e8d45cfc929c4838163cf011dab4043a4a40d5600482015273ffffffffffffffffffffffffffffffffffffffff83169063bd02d0f59060240160206040518083038186803b15801561190057600080fd5b505afa158015611914573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193891906125a2565b905080611949576000935050505090565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527f65c90423fe7c880476633a7e36521740f87199d233dc56eb4ca6643eb76f605f600482015260009073ffffffffffffffffffffffffffffffffffffffff8416906321f8a7219060240160206040518083038186803b1580156119d157600080fd5b505afa1580156119e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a099190612509565b73ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015611a4e57600080fd5b505afa158015611a62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8691906125bb565b50505091505060008113611af6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4175746f6d6174653a20696e76616c69642070726963650000000000000000006044820152606401610321565b80611b0983670de0b6b3a76400006126e5565b611b1391906126aa565b94505050505090565b60015473ffffffffffffffffffffffffffffffffffffffff163314611bc3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610321565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526024820183905284169063a9059cbb90604401602060405180830381600087803b158015611c3357600080fd5b505af1158015611c47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6b9190612567565b50505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314611d18576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610321565b600354604080517f72f702f3000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff16916372f702f3916004808301926020929190829003018186803b158015611d8357600080fd5b505afa158015611d97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dbb9190612509565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b158015611e2657600080fd5b505afa158015611e3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5e91906125a2565b6003546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201526024810183905291925083169063095ea7b390604401602060405180830381600087803b158015611ed457600080fd5b505af1158015611ee8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f0c9190612567565b506003546040517fb6b55f250000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff9091169063b6b55f2590602401600060405180830381600087803b158015611f7957600080fd5b505af1158015611f8d573d6000803e3d6000fd5b505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff16331461203c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610321565b6040517f6b88071800000000000000000000000000000000000000000000000000000000815230600482018190529073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b1580156120a257600080fd5b505af41580156120b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120da9190612509565b73ffffffffffffffffffffffffffffffffffffffff161461217d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a206368616e676520746865206f776e6572206661696c6560448201527f64000000000000000000000000000000000000000000000000000000000000006064820152608401610321565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006121fe610c28565b15612265576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4175746f6d6174653a20706175736564000000000000000000000000000000006044820152606401610321565b600061228660015473ffffffffffffffffffffffffffffffffffffffff1690565b90503273ffffffffffffffffffffffffffffffffffffffff821614156122b05760009150506124c0565b60006122ba610371565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527fe78c16c6d839536d3155985aab4e9c6013c8c3d446054bcebc48612f359d81f5600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906321f8a7219060240160206040518083038186803b15801561234557600080fd5b505afa158015612359573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237d9190612509565b905073ffffffffffffffffffffffffffffffffffffffff8116612422576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f4175746f6d6174653a3a5f62696c6c3a2062616c616e636520636f6e7472616360448201527f74206e6f7420666f756e640000000000000000000000000000000000000000006064820152608401610321565b8073ffffffffffffffffffffffffffffffffffffffff1663e578a225848861244861170f565b896040518563ffffffff1660e01b8152600401612468949392919061260b565b602060405180830381600087803b15801561248257600080fd5b505af1158015612496573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ba91906125a2565b93505050505b92915050565b805169ffffffffffffffffffff811681146124e057600080fd5b919050565b6000602082840312156124f757600080fd5b813561250281612749565b9392505050565b60006020828403121561251b57600080fd5b815161250281612749565b60008060006060848603121561253b57600080fd5b833561254681612749565b9250602084013561255681612749565b929592945050506040919091013590565b60006020828403121561257957600080fd5b8151801515811461250257600080fd5b60006020828403121561259b57600080fd5b5035919050565b6000602082840312156125b457600080fd5b5051919050565b600080600080600060a086880312156125d357600080fd5b6125dc866124c6565b94506020860151935060408601519250606086015191506125ff608087016124c6565b90509295509295909350565b73ffffffffffffffffffffffffffffffffffffffff8516815260006020858184015284604084015260806060840152835180608085015260005b818110156126615785810183015185820160a001528201612645565b8181111561267357600060a083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160a0019695505050505050565b6000826126e0577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612744577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500290565b73ffffffffffffffffffffffffffffffffffffffff8116811461276b57600080fd5b5056fea164736f6c6343000806000a",
  "libraries": {
    "ERC1167": "0x62cA8Ec7e7a6852D93Fb4e4b5583d6D7b2c10b7F"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "changeProtocolFee(int256)": {
        "params": {
          "__protocolFee": "New protocol fee."
        }
      },
      "protocolFee()": {
        "returns": {
          "_0": "Current protocol fee."
        }
      },
      "transfer(address,address,uint256)": {
        "params": {
          "amount": "Transferred amount of tokens.",
          "recipient": "Token recipient address.",
          "token": "The address of the token to be transferred."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "changeProtocolFee(int256)": {
        "notice": "Change protocol fee."
      },
      "info()": {
        "notice": "Returns address of Storage contract."
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "pause()": {
        "notice": "Pause contract."
      },
      "paused()": {
        "notice": "Returns true if the contract is paused, and false otherwise."
      },
      "transfer(address,address,uint256)": {
        "notice": "Transfer ERC20 token to recipient."
      },
      "unpause()": {
        "notice": "Unpause contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4025,
        "contract": "automates/mock/EthAutomate.automate.sol:EthAutomate",
        "label": "_info",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4028,
        "contract": "automates/mock/EthAutomate.automate.sol:EthAutomate",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4031,
        "contract": "automates/mock/EthAutomate.automate.sol:EthAutomate",
        "label": "_paused",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 4034,
        "contract": "automates/mock/EthAutomate.automate.sol:EthAutomate",
        "label": "_protocolFee",
        "offset": 0,
        "slot": "2",
        "type": "t_int256"
      },
      {
        "astId": 3604,
        "contract": "automates/mock/EthAutomate.automate.sol:EthAutomate",
        "label": "staking",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(EthStaking)3872"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(EthStaking)3872": {
        "encoding": "inplace",
        "label": "contract EthStaking",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      }
    }
  }
}