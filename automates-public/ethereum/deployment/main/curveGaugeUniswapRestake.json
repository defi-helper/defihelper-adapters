{
  "address": "0x43A89De6F13B3077f8F13dBAC18b9D78868Fe759",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_info",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "protocolFee",
          "type": "int256"
        }
      ],
      "name": "ProtocolFeeChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calcTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "__protocolFee",
          "type": "int256"
        }
      ],
      "name": "changeProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deadline",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "info",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidityRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapToken",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_slippage",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_deadline",
          "type": "uint16"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gasFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "swapOutMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lpOutMin",
          "type": "uint256"
        }
      ],
      "name": "run",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippage",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "contract IGauge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd95adb8045202928c42f783a5631fd0089af25337bf3a9dac896be14039c0e56",
  "receipt": {
    "to": null,
    "from": "0xBB73463b88b0Cb9681f176d6D43a12C2FeA2c237",
    "contractAddress": "0x43A89De6F13B3077f8F13dBAC18b9D78868Fe759",
    "transactionIndex": 80,
    "gasUsed": "3630826",
    "logsBloom": "0x
    "blockHash": "0x78ec140381949feb6ab460f93dc9f7d69f8cabcf1fa5ec99a005fad8b1b2baee",
    "transactionHash": "0xd95adb8045202928c42f783a5631fd0089af25337bf3a9dac896be14039c0e56",
    "logs": [],
    "blockNumber": 13846671,
    "cumulativeGasUsed": "9934476",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5AE235502Bf1de231AfD75364670d50e3C3694A6"
  ],
  "solcInputHash": "2d3c67c58f62bedb5cf84a8210f9cf98",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_info\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"protocolFee\",\"type\":\"int256\"}],\"name\":\"ProtocolFeeChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calcTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"__protocolFee\",\"type\":\"int256\"}],\"name\":\"changeProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"info\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapToken\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_slippage\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_deadline\",\"type\":\"uint16\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpOutMin\",\"type\":\"uint256\"}],\"name\":\"run\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract IGauge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"changeProtocolFee(int256)\":{\"params\":{\"__protocolFee\":\"New protocol fee.\"}},\"protocolFee()\":{\"returns\":{\"_0\":\"Current protocol fee.\"}},\"transfer(address,address,uint256)\":{\"params\":{\"amount\":\"Transferred amount of tokens.\",\"recipient\":\"Token recipient address.\",\"token\":\"The address of the token to be transferred.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changeProtocolFee(int256)\":{\"notice\":\"Change protocol fee.\"},\"info()\":{\"notice\":\"Returns address of Storage contract.\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"pause()\":{\"notice\":\"Pause contract.\"},\"paused()\":{\"notice\":\"Returns true if the contract is paused, and false otherwise.\"},\"transfer(address,address,uint256)\":{\"notice\":\"Transfer ERC20 token to recipient.\"},\"unpause()\":{\"notice\":\"Unpause contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"automates/curve/GaugeUniswapRestake.automate.sol\":\"GaugeUniswapRestake\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"automates/curve/GaugeUniswapRestake.automate.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../utils/DFH/Automate.sol\\\";\\nimport \\\"../utils/Curve/IRegistry.sol\\\";\\nimport \\\"../utils/Curve/IGauge.sol\\\";\\nimport \\\"../utils/Curve/IMinter.sol\\\";\\nimport \\\"../utils/Curve/IPlainPool.sol\\\";\\nimport \\\"../utils/Curve/IMetaPool.sol\\\";\\nimport \\\"../utils/Uniswap/IUniswapV2Router02.sol\\\";\\nimport {ERC20Tools} from \\\"../utils/ERC20Tools.sol\\\";\\n\\n// solhint-disable not-rely-on-time\\ncontract GaugeUniswapRestake is Automate {\\n  using ERC20Tools for IERC20;\\n\\n  IGauge public staking;\\n\\n  address public liquidityRouter;\\n\\n  address public swapToken;\\n\\n  uint16 public slippage;\\n\\n  uint16 public deadline;\\n\\n  IERC20 internal _lpToken;\\n\\n  address internal _pool;\\n\\n  uint8 internal _swapTokenN;\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  constructor(address _info) Automate(_info) {}\\n\\n  function init(\\n    address _staking,\\n    address _liquidityRouter,\\n    address _swapToken,\\n    uint16 _slippage,\\n    uint16 _deadline\\n  ) external initializer {\\n    require(\\n      !_initialized || address(staking) == _staking,\\n      \\\"GaugeUniswapRestake::init: reinitialize staking address forbidden\\\"\\n    );\\n    staking = IGauge(_staking);\\n    require(\\n      !_initialized || liquidityRouter == _liquidityRouter,\\n      \\\"GaugeUniswapRestake::init: reinitialize liquidity router address forbidden\\\"\\n    );\\n    liquidityRouter = _liquidityRouter;\\n    swapToken = _swapToken;\\n    slippage = _slippage;\\n    deadline = _deadline;\\n\\n    if (!_initialized) {\\n      IRegistry registry = IRegistry(_registry());\\n      _lpToken = IERC20(staking.lp_token());\\n      _pool = registry.get_pool_from_lp_token(address(_lpToken));\\n      address[8] memory coins = registry.get_coins(_pool);\\n      uint256 nCoinsPool = registry.get_n_coins(_pool);\\n\\n      for (; _swapTokenN <= nCoinsPool; _swapTokenN++) {\\n        require(_swapTokenN < nCoinsPool, \\\"GaugeUniswapRestake::init: invalid swap token address\\\");\\n        if (coins[_swapTokenN] == _swapToken) break;\\n      }\\n    }\\n  }\\n\\n  function _registry() internal view returns (address) {\\n    return IStorage(info()).getAddress(keccak256(\\\"Curve:Contract:Registry\\\"));\\n  }\\n\\n  function deposit() external onlyOwner {\\n    IERC20 lpToken = _lpToken; // gas optimisation\\n    uint256 balance = lpToken.balanceOf(address(this));\\n    lpToken.safeApprove(address(staking), balance);\\n    staking.deposit(balance);\\n  }\\n\\n  function refund() external onlyOwner {\\n    address __owner = owner(); // gas optimisation\\n\\n    IGauge _staking = staking; // gas optimisation\\n    uint256 stakingBalance = _staking.balanceOf(address(this));\\n    if (stakingBalance > 0) {\\n      _staking.withdraw(stakingBalance);\\n    }\\n    uint256 lpBalance = _lpToken.balanceOf(address(this));\\n    if (lpBalance > 0) {\\n      _lpToken.transfer(__owner, lpBalance);\\n    }\\n\\n    IMinter _minter = IMinter(staking.minter());\\n    _minter.mint(address(_staking));\\n\\n    IERC20 rewardToken = IERC20(_staking.crv_token());\\n    uint256 rewardBalance = rewardToken.balanceOf(address(this));\\n    if (rewardBalance > 0) {\\n      rewardToken.transfer(__owner, rewardBalance);\\n    }\\n  }\\n\\n  function _swap(\\n    address[2] memory path,\\n    uint256 amount,\\n    uint256 minOut,\\n    uint256 _deadline\\n  ) internal returns (uint256) {\\n    address[] memory _path = new address[](2);\\n    _path[0] = path[0];\\n    _path[1] = path[1];\\n\\n    return\\n      IUniswapV2Router02(liquidityRouter).swapExactTokensForTokens(amount, minOut, _path, address(this), _deadline)[1];\\n  }\\n\\n  function calcTokenAmount(uint256 amount) external view returns (uint256) {\\n    address pool = _pool; // gas optimization\\n    IRegistry registry = IRegistry(_registry());\\n\\n    if (registry.get_n_coins(pool) == 3) {\\n      uint256[3] memory amountIn;\\n      amountIn[_swapTokenN] = amount;\\n      return IPlainPool(pool).calc_token_amount(amountIn, true);\\n    } else {\\n      uint256[2] memory amountIn;\\n      amountIn[_swapTokenN] = amount;\\n      return IMetaPool(pool).calc_token_amount(amountIn, true);\\n    }\\n  }\\n\\n  function _addLiquidity(\\n    address pool,\\n    uint256 amount,\\n    uint256 minOut\\n  ) internal {\\n    IRegistry registry = IRegistry(_registry());\\n\\n    if (registry.get_n_coins(pool) == 3) {\\n      uint256[3] memory amountIn;\\n      amountIn[_swapTokenN] = amount;\\n      IPlainPool(pool).add_liquidity(amountIn, minOut);\\n    } else {\\n      uint256[2] memory amountIn;\\n      amountIn[_swapTokenN] = amount;\\n      IMetaPool(pool).add_liquidity(amountIn, minOut);\\n    }\\n  }\\n\\n  function run(\\n    uint256 gasFee,\\n    uint256 _deadline,\\n    uint256 swapOutMin,\\n    uint256 lpOutMin\\n  ) external bill(gasFee, \\\"CurveGaugeUniswapRestake\\\") {\\n    IGauge _staking = staking; // gas optimization\\n\\n    IMinter _minter = IMinter(_staking.minter());\\n    _minter.mint(address(_staking));\\n    address rewardToken = _staking.crv_token();\\n    uint256 rewardAmount = IERC20(rewardToken).balanceOf(address(this));\\n\\n    IERC20(rewardToken).safeApprove(liquidityRouter, rewardAmount);\\n    uint256 amount = _swap([rewardToken, swapToken], rewardAmount, swapOutMin, _deadline);\\n    IERC20(swapToken).safeApprove(_pool, amount);\\n    _addLiquidity(_pool, amount, lpOutMin);\\n\\n    uint256 lpAmount = _lpToken.balanceOf(address(this));\\n    _lpToken.safeApprove(address(_staking), lpAmount);\\n    _staking.deposit(lpAmount);\\n  }\\n}\\n\",\"keccak256\":\"0x31826d61c80a3b2a169944a10322e3bcf632a1de94782bed0c3d53c625a7fff9\",\"license\":\"BSD-3-Clause\"},\"automates/utils/Curve/IGauge.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable func-name-mixedcase\\ninterface IGauge {\\n  function minter() external view returns (address);\\n\\n  function crv_token() external view returns (address);\\n\\n  function lp_token() external view returns (address);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function deposit(uint256 amount) external;\\n\\n  function deposit(uint256 amount, address recipient) external;\\n\\n  function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xc1ea3ca660ada35e566bd2516c4c8feec4df39d3fdf57e48be73e321fecc9fa9\",\"license\":\"BSD-3-Clause\"},\"automates/utils/Curve/IMetaPool.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable func-name-mixedcase\\ninterface IMetaPool {\\n  function calc_token_amount(uint256[2] memory amounts, bool isDeposit) external view returns (uint256);\\n\\n  function add_liquidity(uint256[2] memory amounts, uint256 minMint) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xdfaece589a5103cc7318bcad550c5a94c2f96e42a3bfcf101b2ee5d44553399a\",\"license\":\"BSD-3-Clause\"},\"automates/utils/Curve/IMinter.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable func-name-mixedcase\\ninterface IMinter {\\n  function minted(address wallet, address gauge) external view returns (uint256);\\n\\n  function mint(address gauge) external;\\n}\\n\",\"keccak256\":\"0x2ee0212e34008af7a45a3c19bfe788f86244bf439452400f45c873f4e18435d0\",\"license\":\"BSD-3-Clause\"},\"automates/utils/Curve/IPlainPool.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable func-name-mixedcase\\ninterface IPlainPool {\\n  function calc_token_amount(uint256[3] memory amounts, bool isDeposit) external view returns (uint256);\\n\\n  function add_liquidity(uint256[3] memory amounts, uint256 minMint) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x59665644c4bd62a6c1fcddaf0b0de070682a66cfc53aa22b110f797d8a450c31\",\"license\":\"BSD-3-Clause\"},\"automates/utils/Curve/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable func-name-mixedcase\\ninterface IRegistry {\\n  function get_n_coins(address pool) external view returns (uint256);\\n\\n  function get_coins(address pool) external view returns (address[8] memory);\\n\\n  function get_pool_from_lp_token(address) external view returns (address);\\n}\\n\",\"keccak256\":\"0x60f6e6c505239f0b694e9e7be9a5dff413f022ac064356cf4271189ad0484613\",\"license\":\"BSD-3-Clause\"},\"automates/utils/DFH/Automate.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./proxy/ERC1167.sol\\\";\\nimport \\\"./IStorage.sol\\\";\\nimport \\\"./IBalance.sol\\\";\\n\\n// solhint-disable avoid-tx-origin\\nabstract contract Automate {\\n  using ERC1167 for address;\\n\\n  /// @notice Storage contract address.\\n  address internal _info;\\n\\n  /// @notice Contract owner.\\n  address internal _owner;\\n\\n  /// @notice Is contract paused.\\n  bool internal _paused;\\n\\n  /// @notice Protocol fee in USD (-1 if value in global storage).\\n  int256 internal _protocolFee;\\n\\n  /// @notice Is contract already initialized.\\n  bool internal _initialized;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  event ProtocolFeeChanged(int256 protocolFee);\\n\\n  constructor(address __info) {\\n    _info = __info;\\n    _owner = tx.origin;\\n    _protocolFee = -1;\\n  }\\n\\n  /**\\n   * @notice Returns address of Storage contract.\\n   */\\n  function info() public view returns (address) {\\n    address impl = address(this).implementation();\\n    if (impl == address(this)) return _info;\\n\\n    return Automate(impl).info();\\n  }\\n\\n  /// @dev Modifier to protect an initializer function from being invoked twice.\\n  modifier initializer() {\\n    if (_owner == address(0)) {\\n      _owner = tx.origin;\\n      _protocolFee = -1;\\n    } else {\\n      require(_owner == msg.sender, \\\"Automate: caller is not the owner\\\");\\n    }\\n    _;\\n    _initialized = true;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(_owner == msg.sender, \\\"Automate: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) external onlyOwner {\\n    require(address(this).implementation() == address(this), \\\"Automate: change the owner failed\\\");\\n\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the pauser.\\n   */\\n  modifier onlyPauser() {\\n    if (address(this).implementation() == address(this)) {\\n      address pauser = IStorage(info()).getAddress(keccak256(\\\"DFH:Pauser\\\"));\\n      require(msg.sender == _owner || msg.sender == pauser, \\\"Automate: caller is not the pauser\\\");\\n    } else {\\n      require(msg.sender == _owner, \\\"Automate: caller is not the pauser\\\");\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Returns true if the contract is paused, and false otherwise.\\n   */\\n  function paused() public view returns (bool) {\\n    address impl = address(this).implementation();\\n    if (impl == address(this)) return _paused;\\n\\n    return _paused || Automate(impl).paused();\\n  }\\n\\n  /**\\n   * @dev Throws if contract unpaused.\\n   */\\n  modifier whenPaused() {\\n    require(paused(), \\\"Automate: not paused\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Throws if contract paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused(), \\\"Automate: paused\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Pause contract.\\n   */\\n  function pause() external onlyPauser whenNotPaused {\\n    _paused = true;\\n  }\\n\\n  /**\\n   * @notice Unpause contract.\\n   */\\n  function unpause() external onlyPauser whenPaused {\\n    _paused = false;\\n  }\\n\\n  /**\\n   * @return Current protocol fee.\\n   */\\n  function protocolFee() public view returns (uint256) {\\n    address impl = address(this).implementation();\\n    if (impl != address(this) && _protocolFee < 0) {\\n      return Automate(impl).protocolFee();\\n    }\\n\\n    IStorage __info = IStorage(info());\\n    uint256 feeOnUSD = _protocolFee < 0 ? __info.getUint(keccak256(\\\"DFH:Fee:Automate\\\")) : uint256(_protocolFee);\\n    if (feeOnUSD == 0) return 0;\\n\\n    (, int256 price, , , ) = AggregatorV3Interface(__info.getAddress(keccak256(\\\"DFH:Fee:PriceFeed\\\"))).latestRoundData();\\n    require(price > 0, \\\"Automate: invalid price\\\");\\n\\n    return (feeOnUSD * 1e18) / uint256(price);\\n  }\\n\\n  /**\\n   * @notice Change protocol fee.\\n   * @param __protocolFee New protocol fee.\\n   */\\n  function changeProtocolFee(int256 __protocolFee) external {\\n    address impl = address(this).implementation();\\n    require(\\n      (impl == address(this) ? _owner : Automate(impl).owner()) == msg.sender,\\n      \\\"Automate::changeProtocolFee: caller is not the protocol owner\\\"\\n    );\\n\\n    _protocolFee = __protocolFee;\\n    emit ProtocolFeeChanged(__protocolFee);\\n  }\\n\\n  /**\\n   * @dev Claim fees from owner.\\n   * @param gasFee Claim gas fee.\\n   * @param operation Claim description.\\n   */\\n  function _bill(uint256 gasFee, string memory operation) internal whenNotPaused returns (uint256) {\\n    address account = owner(); // gas optimisation\\n    if (tx.origin == account) return 0; // free if called by the owner\\n\\n    IStorage __info = IStorage(info());\\n\\n    address balance = __info.getAddress(keccak256(\\\"DFH:Contract:Balance\\\"));\\n    require(balance != address(0), \\\"Automate::_bill: balance contract not found\\\");\\n\\n    return IBalance(balance).claim(account, gasFee, protocolFee(), operation);\\n  }\\n\\n  /**\\n   * @dev Claim fees from owner.\\n   * @param gasFee Claim gas fee.\\n   * @param operation Claim description.\\n   */\\n  modifier bill(uint256 gasFee, string memory operation) {\\n    _bill(gasFee, operation);\\n    _;\\n  }\\n\\n  /**\\n   * @notice Transfer ERC20 token to recipient.\\n   * @param token The address of the token to be transferred.\\n   * @param recipient Token recipient address.\\n   * @param amount Transferred amount of tokens.\\n   */\\n  function transfer(\\n    address token,\\n    address recipient,\\n    uint256 amount\\n  ) external onlyOwner {\\n    IERC20(token).transfer(recipient, amount);\\n  }\\n}\\n\",\"keccak256\":\"0xb0b26358673f6750ee6eef40b1a9668a3dc2965ffb1e1d777c3c8ca8cc2ce5a5\",\"license\":\"BSD-3-Clause\"},\"automates/utils/DFH/IBalance.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\ninterface IBalance {\\n  function claim(\\n    address account,\\n    uint256 gasFee,\\n    uint256 protocolFee,\\n    string memory description\\n  ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xaa996ebfd96fa304ff8c51b240819815ea9cb1b27a250319c57cac7b597be6cc\",\"license\":\"BSD-3-Clause\"},\"automates/utils/DFH/IStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\ninterface IStorage {\\n  function getBytes(bytes32 key) external view returns (bytes memory);\\n\\n  function getBool(bytes32 key) external view returns (bool);\\n\\n  function getUint(bytes32 key) external view returns (uint256);\\n\\n  function getInt(bytes32 key) external view returns (int256);\\n\\n  function getAddress(bytes32 key) external view returns (address);\\n\\n  function getString(bytes32 key) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xc3f6f2d80c27a1d5abbf6f6df55c96a315cdf7887b589c9ef5d45d036c56aa76\",\"license\":\"BSD-3-Clause\"},\"automates/utils/DFH/proxy/ERC1167.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable no-inline-assembly\\nlibrary ERC1167 {\\n  bytes public constant CLONE =\\n    hex\\\"363d3d373d3d3d363d73bebebebebebebebebebebebebebebebebebebebe5af43d82803e903d91602b57fd5bf3\\\";\\n\\n  /**\\n   * @notice Make new proxy contract.\\n   * @param impl Address prototype contract.\\n   * @return proxy Address new proxy contract.\\n   */\\n  function clone(address impl) external returns (address proxy) {\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(ptr, 0x14), shl(0x60, impl))\\n      mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n      proxy := create(0, ptr, 0x37)\\n    }\\n    require(proxy != address(0), \\\"ERC1167: create failed\\\");\\n  }\\n\\n  /**\\n   * @notice Returns address of prototype contract for proxy.\\n   * @param proxy Address proxy contract.\\n   * @return impl Address prototype contract (current contract address if not proxy).\\n   */\\n  function implementation(address proxy) external view returns (address impl) {\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(proxy)\\n    }\\n\\n    impl = proxy;\\n    if (size <= 45 && size >= 41) {\\n      bool matches = true;\\n      uint256 i;\\n\\n      bytes memory code;\\n      assembly {\\n        code := mload(0x40)\\n        mstore(0x40, add(code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n        mstore(code, size)\\n        extcodecopy(proxy, add(code, 0x20), 0, size)\\n      }\\n      for (i = 0; matches && i < 9; i++) {\\n        matches = code[i] == CLONE[i];\\n      }\\n      for (i = 0; matches && i < 15; i++) {\\n        if (i == 4) {\\n          matches = code[code.length - i - 1] == bytes1(uint8(CLONE[45 - i - 1]) - uint8(45 - size));\\n        } else {\\n          matches = code[code.length - i - 1] == CLONE[45 - i - 1];\\n        }\\n      }\\n      if (code[9] != bytes1(0x73 - uint8(45 - size))) {\\n        matches = false;\\n      }\\n      uint256 forwardedToBuffer;\\n      if (matches) {\\n        assembly {\\n          forwardedToBuffer := mload(add(code, 30))\\n        }\\n        forwardedToBuffer &= (0x1 << (20 * 8)) - 1;\\n        impl = address(uint160(forwardedToBuffer >> ((45 - size) * 8)));\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x766f43e1832068a2a230f9bc19db0b190f638c4b0acb2dc689da07d43a45675f\",\"license\":\"BSD-3-Clause\"},\"automates/utils/ERC20Tools.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary ERC20Tools {\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 allowance = token.allowance(address(this), spender);\\n    if (allowance != 0 && allowance < value) {\\n      token.approve(spender, 0);\\n    }\\n    if (allowance != value) {\\n      token.approve(spender, value);\\n    }\\n  }\\n\\n  function safeApproveAll(IERC20 token, address spender) internal {\\n    safeApprove(token, spender, 2**256 - 1);\\n  }\\n}\\n\",\"keccak256\":\"0x099bc27ecc2cbc3474fca81003c55eac408130fb911f21364d9f3dec9afc0620\",\"license\":\"BSD-3-Clause\"},\"automates/utils/Uniswap/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable func-name-mixedcase\\ninterface IUniswapV2Router02 {\\n  function factory() external view returns (address);\\n\\n  function WETH() external view returns (address);\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 amountADesired,\\n    uint256 amountBDesired,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    returns (\\n      uint256 amountA,\\n      uint256 amountB,\\n      uint256 liquidity\\n    );\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint256 amountTokenDesired,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    payable\\n    returns (\\n      uint256 amountToken,\\n      uint256 amountETH,\\n      uint256 liquidity\\n    );\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETH(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function removeLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETHWithPermit(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function swapExactTokensForTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactTokens(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactETHForTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactETH(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactTokensForETH(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapETHForExactTokens(\\n    uint256 amountOut,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) external pure returns (uint256 amountB);\\n\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountOut);\\n\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountIn);\\n\\n  function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n  function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountETH);\\n\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountETH);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable;\\n\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n}\\n\",\"keccak256\":\"0xf12b9639d5053651c2416527a638fd3168276feb207265374d87574a9a312f75\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101515760003560e01c806360d20ccc116100cd578063b0e21e8a11610081578063d0e30db011610066578063d0e30db0146102f3578063dc73e49c146102fb578063f2fde38b1461031b57600080fd5b8063b0e21e8a146102d8578063beabacc8146102e057600080fd5b80638456cb59116100b25780638456cb591461029f5780638da5cb5b146102a75780639742b5c3146102c557600080fd5b806360d20ccc1461026b5780637b7902dd1461027e57600080fd5b80633e032a3b116101245780634cf088d9116101095780634cf088d914610226578063590e1ae31461024b5780635c975abb1461025357600080fd5b80633e032a3b146101f85780633f4ba83a1461021e57600080fd5b806315509d2b14610156578063247029441461016b57806329dcb0cf146101b5578063370158ea146101f0575b600080fd5b610169610164366004613c0b565b61032e565b005b60045461018b9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6005546101dd90760100000000000000000000000000000000000000000000900461ffff1681565b60405161ffff90911681526020016101ac565b61018b6107cd565b6005546101dd9074010000000000000000000000000000000000000000900461ffff1681565b61016961092f565b60035461018b90610100900473ffffffffffffffffffffffffffffffffffffffff1681565b610169610cc6565b61025b611320565b60405190151581526020016101ac565b6101696102793660046139cc565b6114a5565b61029161028c366004613bd9565b611d61565b6040519081526020016101ac565b610169611fb2565b60015473ffffffffffffffffffffffffffffffffffffffff1661018b565b6101696102d3366004613bd9565b61235c565b610291612596565b6101696102ee366004613a37565b6129a3565b610169612af8565b60055461018b9073ffffffffffffffffffffffffffffffffffffffff1681565b61016961032936600461398b565b612d00565b836040518060400160405280601881526020017f43757276654761756765556e697377617052657374616b65000000000000000081525061036f8282612f5f565b506000600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663075461726040518163ffffffff1660e01b815260040160206040518083038186803b1580156103df57600080fd5b505afa1580156103f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041791906139af565b6040517f6a62784200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015291925090821690636a62784290602401600060405180830381600087803b15801561048457600080fd5b505af1158015610498573d6000803e3d6000fd5b5050505060008273ffffffffffffffffffffffffffffffffffffffff166376d8b1176040518163ffffffff1660e01b815260040160206040518083038186803b1580156104e457600080fd5b505afa1580156104f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051c91906139af565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b15801561058757600080fd5b505afa15801561059b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bf9190613bf2565b6004549091506105e99073ffffffffffffffffffffffffffffffffffffffff848116911683613231565b6040805180820190915273ffffffffffffffffffffffffffffffffffffffff808416825260055416602082015260009061062590838b8d61344f565b6007546005549192506106529173ffffffffffffffffffffffffffffffffffffffff908116911683613231565b6007546106769073ffffffffffffffffffffffffffffffffffffffff16828a6135ca565b6006546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b1580156106e057600080fd5b505afa1580156106f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107189190613bf2565b60065490915061073f9073ffffffffffffffffffffffffffffffffffffffff168783613231565b6040517fb6b55f250000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff87169063b6b55f2590602401600060405180830381600087803b1580156107a757600080fd5b505af11580156107bb573d6000803e3d6000fd5b50505050505050505050505050505050565b6040517f6b880718000000000000000000000000000000000000000000000000000000008152306004820152600090819073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b15801561083557600080fd5b505af4158015610849573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086d91906139af565b905073ffffffffffffffffffffffffffffffffffffffff81163014156108ab57505060005473ffffffffffffffffffffffffffffffffffffffff1690565b8073ffffffffffffffffffffffffffffffffffffffff1663370158ea6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108f157600080fd5b505afa158015610905573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092991906139af565b91505090565b6040517f6b88071800000000000000000000000000000000000000000000000000000000815230600482018190529073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b15801561099557600080fd5b505af41580156109a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cd91906139af565b73ffffffffffffffffffffffffffffffffffffffff161415610b875760006109f36107cd565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527f689d13d8ed8ef1027633ba26e7121121cf427434450a529548f19bf175974395600482015273ffffffffffffffffffffffffffffffffffffffff91909116906321f8a7219060240160206040518083038186803b158015610a7a57600080fd5b505afa158015610a8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab291906139af565b60015490915073ffffffffffffffffffffffffffffffffffffffff16331480610af057503373ffffffffffffffffffffffffffffffffffffffff8216145b610b81576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f657200000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b50610c2e565b60015473ffffffffffffffffffffffffffffffffffffffff163314610c2e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f65720000000000000000000000000000000000000000000000000000000000006064820152608401610b78565b610c36611320565b610c9c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4175746f6d6174653a206e6f74207061757365640000000000000000000000006044820152606401610b78565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff169055565b60015473ffffffffffffffffffffffffffffffffffffffff163314610d6d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610b78565b6000610d8e60015473ffffffffffffffffffffffffffffffffffffffff1690565b6003546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152919250610100900473ffffffffffffffffffffffffffffffffffffffff169060009082906370a082319060240160206040518083038186803b158015610e0257600080fd5b505afa158015610e16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3a9190613bf2565b90508015610ec3576040517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff831690632e1a7d4d90602401600060405180830381600087803b158015610eaa57600080fd5b505af1158015610ebe573d6000803e3d6000fd5b505050505b6006546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b158015610f2d57600080fd5b505afa158015610f41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f659190613bf2565b9050801561101b576006546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b158015610fe157600080fd5b505af1158015610ff5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110199190613bb7565b505b6000600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663075461726040518163ffffffff1660e01b815260040160206040518083038186803b15801561108557600080fd5b505afa158015611099573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bd91906139af565b6040517f6a62784200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015291925090821690636a62784290602401600060405180830381600087803b15801561112a57600080fd5b505af115801561113e573d6000803e3d6000fd5b5050505060008473ffffffffffffffffffffffffffffffffffffffff166376d8b1176040518163ffffffff1660e01b815260040160206040518083038186803b15801561118a57600080fd5b505afa15801561119e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c291906139af565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b15801561122d57600080fd5b505afa158015611241573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112659190613bf2565b90508015611317576040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301526024820183905283169063a9059cbb90604401602060405180830381600087803b1580156112dd57600080fd5b505af11580156112f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113159190613bb7565b505b50505050505050565b6040517f6b880718000000000000000000000000000000000000000000000000000000008152306004820152600090819073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b15801561138857600080fd5b505af415801561139c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c091906139af565b905073ffffffffffffffffffffffffffffffffffffffff811630141561140357505060015474010000000000000000000000000000000000000000900460ff1690565b60015474010000000000000000000000000000000000000000900460ff168061092957508073ffffffffffffffffffffffffffffffffffffffff16635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561146d57600080fd5b505afa158015611481573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109299190613bb7565b60015473ffffffffffffffffffffffffffffffffffffffff1661151557600180547fffffffffffffffffffffffff000000000000000000000000000000000000000016321790557fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6002556115bc565b60015473ffffffffffffffffffffffffffffffffffffffff1633146115bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610b78565b60035460ff1615806115ed575060035473ffffffffffffffffffffffffffffffffffffffff86811661010090920416145b61169f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604160248201527f4761756765556e697377617052657374616b653a3a696e69743a207265696e6960448201527f7469616c697a65207374616b696e67206164647265737320666f72626964646560648201527f6e00000000000000000000000000000000000000000000000000000000000000608482015260a401610b78565b6003805473ffffffffffffffffffffffffffffffffffffffff8716610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff8216811790925560ff9182169116171580611714575060045473ffffffffffffffffffffffffffffffffffffffff8581169116145b6117c6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604a60248201527f4761756765556e697377617052657374616b653a3a696e69743a207265696e6960448201527f7469616c697a65206c697175696469747920726f75746572206164647265737360648201527f20666f7262696464656e00000000000000000000000000000000000000000000608482015260a401610b78565b6004805473ffffffffffffffffffffffffffffffffffffffff8087167fffffffffffffffffffffffff0000000000000000000000000000000000000000909216919091179091556005805461ffff848116760100000000000000000000000000000000000000000000027fffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffff91871674010000000000000000000000000000000000000000027fffffffffffffffffffff0000000000000000000000000000000000000000000090931694881694909417919091171691909117905560035460ff16611d2f5760006118b5613850565b9050600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382c630666040518163ffffffff1660e01b815260040160206040518083038186803b15801561191f57600080fd5b505afa158015611933573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195791906139af565b600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9283169081179091556040517fbdf475c300000000000000000000000000000000000000000000000000000000815260048101919091529082169063bdf475c39060240160206040518083038186803b1580156119ee57600080fd5b505afa158015611a02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2691906139af565b600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9283169081179091556040517f9ac90d3d0000000000000000000000000000000000000000000000000000000081526004810191909152600091831690639ac90d3d906024016101006040518083038186803b158015611ac057600080fd5b505afa158015611ad4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af89190613a78565b6007546040517f940494f100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201529192506000919084169063940494f19060240160206040518083038186803b158015611b6957600080fd5b505afa158015611b7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba19190613bf2565b90505b60075474010000000000000000000000000000000000000000900460ff168110611d2b5760075474010000000000000000000000000000000000000000900460ff168111611c74576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f4761756765556e697377617052657374616b653a3a696e69743a20696e76616c60448201527f6964207377617020746f6b656e206164647265737300000000000000000000006064820152608401610b78565b60075473ffffffffffffffffffffffffffffffffffffffff871690839074010000000000000000000000000000000000000000900460ff1660088110611cbc57611cbc613f77565b602002015173ffffffffffffffffffffffffffffffffffffffff161415611ce257611d2b565b6007805474010000000000000000000000000000000000000000900460ff16906014611d0d83613f28565b91906101000a81548160ff021916908360ff16021790555050611ba4565b5050505b5050600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055505050565b60075460009073ffffffffffffffffffffffffffffffffffffffff1681611d86613850565b6040517f940494f100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529192509082169063940494f19060240160206040518083038186803b158015611df157600080fd5b505afa158015611e05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e299190613bf2565b60031415611f1e57611e3961391e565b6007548590829074010000000000000000000000000000000000000000900460ff1660038110611e6b57611e6b613f77565b60200201526040517f3883e11900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841690633883e11990611ec5908490600190600401613d9e565b60206040518083038186803b158015611edd57600080fd5b505afa158015611ef1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f159190613bf2565b95945050505050565b611f2661393c565b6007548590829074010000000000000000000000000000000000000000900460ff1660028110611f5857611f58613f77565b60200201526040517fed8e84f300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063ed8e84f390611ec5908490600190600401613d66565b6040517f6b88071800000000000000000000000000000000000000000000000000000000815230600482018190529073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b15801561201857600080fd5b505af415801561202c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061205091906139af565b73ffffffffffffffffffffffffffffffffffffffff1614156122055760006120766107cd565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527f689d13d8ed8ef1027633ba26e7121121cf427434450a529548f19bf175974395600482015273ffffffffffffffffffffffffffffffffffffffff91909116906321f8a7219060240160206040518083038186803b1580156120fd57600080fd5b505afa158015612111573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213591906139af565b60015490915073ffffffffffffffffffffffffffffffffffffffff1633148061217357503373ffffffffffffffffffffffffffffffffffffffff8216145b6121ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f65720000000000000000000000000000000000000000000000000000000000006064820152608401610b78565b506122ac565b60015473ffffffffffffffffffffffffffffffffffffffff1633146122ac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f65720000000000000000000000000000000000000000000000000000000000006064820152608401610b78565b6122b4611320565b1561231b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4175746f6d6174653a20706175736564000000000000000000000000000000006044820152606401610b78565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000179055565b6040517f6b88071800000000000000000000000000000000000000000000000000000000815230600482015260009073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b1580156123c257600080fd5b505af41580156123d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123fa91906139af565b90503373ffffffffffffffffffffffffffffffffffffffff8216301461249d578173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561246057600080fd5b505afa158015612474573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061249891906139af565b6124b7565b60015473ffffffffffffffffffffffffffffffffffffffff165b73ffffffffffffffffffffffffffffffffffffffff161461255a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603d60248201527f4175746f6d6174653a3a6368616e676550726f746f636f6c4665653a2063616c60448201527f6c6572206973206e6f74207468652070726f746f636f6c206f776e65720000006064820152608401610b78565b60028290556040518281527f3c1d43943224e49d951ce8295a5c8332b517083b3f89bed50feae2cb39caebb59060200160405180910390a15050565b6040517f6b880718000000000000000000000000000000000000000000000000000000008152306004820152600090819073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b1580156125fe57600080fd5b505af4158015612612573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061263691906139af565b905073ffffffffffffffffffffffffffffffffffffffff8116301480159061266057506000600254125b156126e3578073ffffffffffffffffffffffffffffffffffffffff1663b0e21e8a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156126ab57600080fd5b505afa1580156126bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109299190613bf2565b60006126ed6107cd565b905060008060025412612702576002546127bf565b6040517fbd02d0f50000000000000000000000000000000000000000000000000000000081527fa93d95f96a5de25d7a41ddf1f5e8d45cfc929c4838163cf011dab4043a4a40d5600482015273ffffffffffffffffffffffffffffffffffffffff83169063bd02d0f59060240160206040518083038186803b15801561278757600080fd5b505afa15801561279b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127bf9190613bf2565b9050806127d0576000935050505090565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527f65c90423fe7c880476633a7e36521740f87199d233dc56eb4ca6643eb76f605f600482015260009073ffffffffffffffffffffffffffffffffffffffff8416906321f8a7219060240160206040518083038186803b15801561285857600080fd5b505afa15801561286c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061289091906139af565b73ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156128d557600080fd5b505afa1580156128e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061290d9190613c3d565b5050509150506000811361297d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4175746f6d6174653a20696e76616c69642070726963650000000000000000006044820152606401610b78565b8061299083670de0b6b3a7640000613eeb565b61299a9190613eb0565b94505050505090565b60015473ffffffffffffffffffffffffffffffffffffffff163314612a4a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610b78565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526024820183905284169063a9059cbb90604401602060405180830381600087803b158015612aba57600080fd5b505af1158015612ace573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612af29190613bb7565b50505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314612b9f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610b78565b6006546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff9091169060009082906370a082319060240160206040518083038186803b158015612c0d57600080fd5b505afa158015612c21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c459190613bf2565b600354909150612c749073ffffffffffffffffffffffffffffffffffffffff8481169161010090041683613231565b6003546040517fb6b55f250000000000000000000000000000000000000000000000000000000081526004810183905261010090910473ffffffffffffffffffffffffffffffffffffffff169063b6b55f2590602401600060405180830381600087803b158015612ce457600080fd5b505af1158015612cf8573d6000803e3d6000fd5b505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314612da7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610b78565b6040517f6b88071800000000000000000000000000000000000000000000000000000000815230600482018190529073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b158015612e0d57600080fd5b505af4158015612e21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e4591906139af565b73ffffffffffffffffffffffffffffffffffffffff1614612ee8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a206368616e676520746865206f776e6572206661696c6560448201527f64000000000000000000000000000000000000000000000000000000000000006064820152608401610b78565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000612f69611320565b15612fd0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4175746f6d6174653a20706175736564000000000000000000000000000000006044820152606401610b78565b6000612ff160015473ffffffffffffffffffffffffffffffffffffffff1690565b90503273ffffffffffffffffffffffffffffffffffffffff8216141561301b57600091505061322b565b60006130256107cd565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527fe78c16c6d839536d3155985aab4e9c6013c8c3d446054bcebc48612f359d81f5600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906321f8a7219060240160206040518083038186803b1580156130b057600080fd5b505afa1580156130c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130e891906139af565b905073ffffffffffffffffffffffffffffffffffffffff811661318d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f4175746f6d6174653a3a5f62696c6c3a2062616c616e636520636f6e7472616360448201527f74206e6f7420666f756e640000000000000000000000000000000000000000006064820152608401610b78565b8073ffffffffffffffffffffffffffffffffffffffff1663e578a22584886131b3612596565b896040518563ffffffff1660e01b81526004016131d39493929190613cc7565b602060405180830381600087803b1580156131ed57600080fd5b505af1158015613201573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132259190613bf2565b93505050505b92915050565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff83811660248301526000919085169063dd62ed3e9060440160206040518083038186803b1580156132a257600080fd5b505afa1580156132b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132da9190613bf2565b905080158015906132ea57508181105b15613399576040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526000602483015285169063095ea7b390604401602060405180830381600087803b15801561335f57600080fd5b505af1158015613373573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133979190613bb7565b505b818114612af2576040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526024820184905285169063095ea7b390604401602060405180830381600087803b15801561341057600080fd5b505af1158015613424573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134489190613bb7565b5050505050565b604080516002808252606082018352600092839291906020830190803683375050875182519293509183915060009061348a5761348a613f77565b73ffffffffffffffffffffffffffffffffffffffff929092166020928302919091018201528601518151829060019081106134c7576134c7613f77565b73ffffffffffffffffffffffffffffffffffffffff9283166020918202929092010152600480546040517f38ed17390000000000000000000000000000000000000000000000000000000081529216916338ed1739916135319189918991879130918b9101613dd6565b600060405180830381600087803b15801561354b57600080fd5b505af115801561355f573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526135a59190810190613b0a565b6001815181106135b7576135b7613f77565b6020026020010151915050949350505050565b60006135d4613850565b6040517f940494f100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301529192509082169063940494f19060240160206040518083038186803b15801561363f57600080fd5b505afa158015613653573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136779190613bf2565b6003141561376b5761368761391e565b6007548490829074010000000000000000000000000000000000000000900460ff16600381106136b9576136b9613f77565b60200201526040517f4515cef300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861690634515cef3906137129084908790600401613dbb565b602060405180830381600087803b15801561372c57600080fd5b505af1158015613740573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137649190613bf2565b5050612af2565b61377361393c565b6007548490829074010000000000000000000000000000000000000000900460ff16600281106137a5576137a5613f77565b60200201526040517f0b4c7e4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861690630b4c7e4d906137fe9084908790600401613d83565b602060405180830381600087803b15801561381857600080fd5b505af115801561382c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cf89190613bf2565b600061385a6107cd565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527fe3afe40301d08e5458680c2ac903d4fddf0931e5e1a5c6d9e21328d89e8d8e7c600482015273ffffffffffffffffffffffffffffffffffffffff91909116906321f8a7219060240160206040518083038186803b1580156138e157600080fd5b505afa1580156138f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061391991906139af565b905090565b60405180606001604052806003906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b803561ffff8116811461396c57600080fd5b919050565b805169ffffffffffffffffffff8116811461396c57600080fd5b60006020828403121561399d57600080fd5b81356139a881613fd5565b9392505050565b6000602082840312156139c157600080fd5b81516139a881613fd5565b600080600080600060a086880312156139e457600080fd5b85356139ef81613fd5565b945060208601356139ff81613fd5565b93506040860135613a0f81613fd5565b9250613a1d6060870161395a565b9150613a2b6080870161395a565b90509295509295909350565b600080600060608486031215613a4c57600080fd5b8335613a5781613fd5565b92506020840135613a6781613fd5565b929592945050506040919091013590565b6000610100808385031215613a8c57600080fd5b83601f840112613a9b57600080fd5b60405181810181811067ffffffffffffffff82111715613abd57613abd613fa6565b6040528084838101871015613ad157600080fd5b600093505b6008841015613aff578051613aea81613fd5565b82526001939093019260209182019101613ad6565b509095945050505050565b60006020808385031215613b1d57600080fd5b825167ffffffffffffffff80821115613b3557600080fd5b818501915085601f830112613b4957600080fd5b815181811115613b5b57613b5b613fa6565b8060051b9150613b6c848301613e61565b8181528481019084860184860187018a1015613b8757600080fd5b600095505b83861015613baa578051835260019590950194918601918601613b8c565b5098975050505050505050565b600060208284031215613bc957600080fd5b815180151581146139a857600080fd5b600060208284031215613beb57600080fd5b5035919050565b600060208284031215613c0457600080fd5b5051919050565b60008060008060808587031215613c2157600080fd5b5050823594602084013594506040840135936060013592509050565b600080600080600060a08688031215613c5557600080fd5b613c5e86613971565b9450602086015193506040860151925060608601519150613a2b60808701613971565b8060005b6002811015612af2578151845260209384019390910190600101613c85565b8060005b6003811015612af2578151845260209384019390910190600101613ca8565b73ffffffffffffffffffffffffffffffffffffffff8516815260006020858184015284604084015260806060840152835180608085015260005b81811015613d1d5785810183015185820160a001528201613d01565b81811115613d2f57600060a083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160a0019695505050505050565b60608101613d748285613c81565b82151560408301529392505050565b60608101613d918285613c81565b8260408301529392505050565b60808101613dac8285613ca4565b82151560608301529392505050565b60808101613dc98285613ca4565b8260608301529392505050565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015613e3357845173ffffffffffffffffffffffffffffffffffffffff1683529383019391830191600101613e01565b505073ffffffffffffffffffffffffffffffffffffffff969096166060850152505050608001529392505050565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715613ea857613ea8613fa6565b604052919050565b600082613ee6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613f2357613f23613f48565b500290565b600060ff821660ff811415613f3f57613f3f613f48565b60010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114613ff757600080fd5b5056fea164736f6c6343000806000a",
  "libraries": {
    "ERC1167": "0x7ecFCbdeb6f195030B9Bf2ECc402f6d5433d116D"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "changeProtocolFee(int256)": {
        "params": {
          "__protocolFee": "New protocol fee."
        }
      },
      "protocolFee()": {
        "returns": {
          "_0": "Current protocol fee."
        }
      },
      "transfer(address,address,uint256)": {
        "params": {
          "amount": "Transferred amount of tokens.",
          "recipient": "Token recipient address.",
          "token": "The address of the token to be transferred."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "changeProtocolFee(int256)": {
        "notice": "Change protocol fee."
      },
      "info()": {
        "notice": "Returns address of Storage contract."
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "pause()": {
        "notice": "Pause contract."
      },
      "paused()": {
        "notice": "Returns true if the contract is paused, and false otherwise."
      },
      "transfer(address,address,uint256)": {
        "notice": "Transfer ERC20 token to recipient."
      },
      "unpause()": {
        "notice": "Unpause contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4892,
        "contract": "automates/curve/GaugeUniswapRestake.automate.sol:GaugeUniswapRestake",
        "label": "_info",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4895,
        "contract": "automates/curve/GaugeUniswapRestake.automate.sol:GaugeUniswapRestake",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4898,
        "contract": "automates/curve/GaugeUniswapRestake.automate.sol:GaugeUniswapRestake",
        "label": "_paused",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 4901,
        "contract": "automates/curve/GaugeUniswapRestake.automate.sol:GaugeUniswapRestake",
        "label": "_protocolFee",
        "offset": 0,
        "slot": "2",
        "type": "t_int256"
      },
      {
        "astId": 4904,
        "contract": "automates/curve/GaugeUniswapRestake.automate.sol:GaugeUniswapRestake",
        "label": "_initialized",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 2526,
        "contract": "automates/curve/GaugeUniswapRestake.automate.sol:GaugeUniswapRestake",
        "label": "staking",
        "offset": 1,
        "slot": "3",
        "type": "t_contract(IGauge)4786"
      },
      {
        "astId": 2528,
        "contract": "automates/curve/GaugeUniswapRestake.automate.sol:GaugeUniswapRestake",
        "label": "liquidityRouter",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2530,
        "contract": "automates/curve/GaugeUniswapRestake.automate.sol:GaugeUniswapRestake",
        "label": "swapToken",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 2532,
        "contract": "automates/curve/GaugeUniswapRestake.automate.sol:GaugeUniswapRestake",
        "label": "slippage",
        "offset": 20,
        "slot": "5",
        "type": "t_uint16"
      },
      {
        "astId": 2534,
        "contract": "automates/curve/GaugeUniswapRestake.automate.sol:GaugeUniswapRestake",
        "label": "deadline",
        "offset": 22,
        "slot": "5",
        "type": "t_uint16"
      },
      {
        "astId": 2537,
        "contract": "automates/curve/GaugeUniswapRestake.automate.sol:GaugeUniswapRestake",
        "label": "_lpToken",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IERC20)669"
      },
      {
        "astId": 2539,
        "contract": "automates/curve/GaugeUniswapRestake.automate.sol:GaugeUniswapRestake",
        "label": "_pool",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 2541,
        "contract": "automates/curve/GaugeUniswapRestake.automate.sol:GaugeUniswapRestake",
        "label": "_swapTokenN",
        "offset": 20,
        "slot": "7",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)669": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IGauge)4786": {
        "encoding": "inplace",
        "label": "contract IGauge",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}