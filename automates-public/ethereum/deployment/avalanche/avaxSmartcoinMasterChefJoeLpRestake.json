{
  "address": "0xb19C5dd2cB210ff1Bd3f79126824b2cbfA4E7443",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_info",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "protocolFee",
          "type": "int256"
        }
      ],
      "name": "ProtocolFeeChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "__protocolFee",
          "type": "int256"
        }
      ],
      "name": "changeProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deadline",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "info",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidityRouter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_slippage",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_deadline",
          "type": "uint16"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gasFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256[2]",
          "name": "_outMin",
          "type": "uint256[2]"
        }
      ],
      "name": "run",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippage",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "contract IMasterChefJoeV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5c61a2cc4bbe101be6c88eccb13f3c87e8475717934e8dd21d874d1085a85b26",
  "receipt": {
    "to": null,
    "from": "0xBB73463b88b0Cb9681f176d6D43a12C2FeA2c237",
    "contractAddress": "0xb19C5dd2cB210ff1Bd3f79126824b2cbfA4E7443",
    "transactionIndex": 23,
    "gasUsed": "3572698",
    "logsBloom": "0x
    "blockHash": "0x19dc73fb6f95d2c948c882247bde367d835b024d1a35f75f1c96b13a06f59a63",
    "transactionHash": "0x5c61a2cc4bbe101be6c88eccb13f3c87e8475717934e8dd21d874d1085a85b26",
    "logs": [],
    "blockNumber": 8513365,
    "cumulativeGasUsed": "6555888",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDdfbffEfacB7598Ad995D327Ea4fF2D42aCF7b77"
  ],
  "solcInputHash": "2d3c67c58f62bedb5cf84a8210f9cf98",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_info\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"protocolFee\",\"type\":\"int256\"}],\"name\":\"ProtocolFeeChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"__protocolFee\",\"type\":\"int256\"}],\"name\":\"changeProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"info\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_slippage\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_deadline\",\"type\":\"uint16\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"_outMin\",\"type\":\"uint256[2]\"}],\"name\":\"run\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract IMasterChefJoeV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"changeProtocolFee(int256)\":{\"params\":{\"__protocolFee\":\"New protocol fee.\"}},\"protocolFee()\":{\"returns\":{\"_0\":\"Current protocol fee.\"}},\"transfer(address,address,uint256)\":{\"params\":{\"amount\":\"Transferred amount of tokens.\",\"recipient\":\"Token recipient address.\",\"token\":\"The address of the token to be transferred.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changeProtocolFee(int256)\":{\"notice\":\"Change protocol fee.\"},\"info()\":{\"notice\":\"Returns address of Storage contract.\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"pause()\":{\"notice\":\"Pause contract.\"},\"paused()\":{\"notice\":\"Returns true if the contract is paused, and false otherwise.\"},\"transfer(address,address,uint256)\":{\"notice\":\"Transfer ERC20 token to recipient.\"},\"unpause()\":{\"notice\":\"Unpause contract.\"}},\"notice\":\"Use with LP token only.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"automates/avaxSmartcoin/MasterChefJoeLpRestake.automate.sol\":\"MasterChefJoeLpRestake\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"automates/avaxSmartcoin/IMasterChefJoeV2.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\ninterface IMasterChefJoeV2 {\\n  struct UserInfo {\\n    uint256 amount;\\n    uint256 rewardDebt;\\n  }\\n\\n  struct PoolInfo {\\n    address lpToken;\\n    uint256 allocPoint;\\n    uint256 lastRewardTimestamp;\\n    uint256 accJoePerShare;\\n    address rewarder;\\n  }\\n\\n  function joe() external view returns (address);\\n\\n  function poolInfo(uint256 pool) external view returns (PoolInfo memory);\\n\\n  function userInfo(uint256 pool, address user) external view returns (UserInfo memory);\\n\\n  function pendingTokens(uint256 pool, address user)\\n    external\\n    view\\n    returns (\\n      uint256 pendingJoe,\\n      address bonusTokenAddress,\\n      string memory bonusTokenSymbol,\\n      uint256 pendingBonusToken\\n    );\\n\\n  function deposit(uint256 pool, uint256 amount) external;\\n\\n  function withdraw(uint256 pool, uint256 amount) external;\\n\\n  function emergencyWithdraw(uint256 pool) external;\\n}\\n\",\"keccak256\":\"0x78f9a25c4646705db5e75219fc122d87c977a7a1a373f105af2c6e7b11d27376\",\"license\":\"BSD-3-Clause\"},\"automates/avaxSmartcoin/MasterChefJoeLpRestake.automate.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../utils/DFH/Automate.sol\\\";\\nimport \\\"../utils/DFH/IStorage.sol\\\";\\nimport \\\"../utils/Uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"../utils/Uniswap/IUniswapV2Pair.sol\\\";\\nimport \\\"./IMasterChefJoeV2.sol\\\";\\nimport {ERC20Tools} from \\\"../utils/ERC20Tools.sol\\\";\\n\\n/**\\n * @notice Use with LP token only.\\n */\\ncontract MasterChefJoeLpRestake is Automate {\\n  using ERC20Tools for IERC20;\\n\\n  IMasterChefJoeV2 public staking;\\n\\n  address public liquidityRouter;\\n\\n  uint256 public pool;\\n\\n  uint16 public slippage;\\n\\n  uint16 public deadline;\\n\\n  IERC20 public stakingToken;\\n\\n  IERC20 public rewardToken;\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  constructor(address _info) Automate(_info) {}\\n\\n  function init(\\n    address _staking,\\n    address _liquidityRouter,\\n    uint256 _pool,\\n    uint16 _slippage,\\n    uint16 _deadline\\n  ) external initializer {\\n    require(\\n      !_initialized || address(staking) == _staking,\\n      \\\"MasterChefJoeLpRestake::init: reinitialize staking address forbidden\\\"\\n    );\\n    staking = IMasterChefJoeV2(_staking);\\n    require(\\n      !_initialized || liquidityRouter == _liquidityRouter,\\n      \\\"MasterChefJoeLpRestake::init: reinitialize liquidity router address forbidden\\\"\\n    );\\n    liquidityRouter = _liquidityRouter;\\n    require(!_initialized || pool == _pool, \\\"MasterChefJoeLpRestake::init: reinitialize pool index forbidden\\\");\\n    pool = _pool;\\n    slippage = _slippage;\\n    deadline = _deadline;\\n\\n    if (!_initialized) {\\n      IMasterChefJoeV2.PoolInfo memory poolInfo = staking.poolInfo(pool);\\n      stakingToken = IERC20(poolInfo.lpToken);\\n      rewardToken = IERC20(staking.joe());\\n    }\\n  }\\n\\n  function deposit() external onlyOwner {\\n    IERC20 _stakingToken = stakingToken; // gas optimisation\\n    uint256 balance = _stakingToken.balanceOf(address(this));\\n    _stakingToken.safeApprove(address(staking), balance);\\n    staking.deposit(pool, balance);\\n  }\\n\\n  function refund() external onlyOwner {\\n    IMasterChefJoeV2 _staking = staking; // gas optimisation\\n    address __owner = owner(); // gas optimisation\\n    IMasterChefJoeV2.UserInfo memory userInfo = _staking.userInfo(pool, address(this));\\n    _staking.withdraw(pool, userInfo.amount);\\n    stakingToken.transfer(__owner, stakingToken.balanceOf(address(this)));\\n    rewardToken.transfer(__owner, rewardToken.balanceOf(address(this)));\\n  }\\n\\n  function emergencyWithdraw() external onlyOwner {\\n    address __owner = owner(); // gas optimisation\\n    staking.emergencyWithdraw(pool);\\n    stakingToken.transfer(__owner, stakingToken.balanceOf(address(this)));\\n    rewardToken.transfer(__owner, rewardToken.balanceOf(address(this)));\\n  }\\n\\n  function _swap(\\n    address[2] memory path,\\n    uint256[2] memory amount,\\n    uint256 _deadline\\n  ) internal returns (uint256) {\\n    if (path[0] == path[1]) return amount[0];\\n\\n    address[] memory _path = new address[](2);\\n    _path[0] = path[0];\\n    _path[1] = path[1];\\n\\n    return\\n      IUniswapV2Router02(liquidityRouter).swapExactTokensForTokens(\\n        amount[0],\\n        amount[1],\\n        _path,\\n        address(this),\\n        _deadline\\n      )[1];\\n  }\\n\\n  function _addLiquidity(\\n    address[2] memory path,\\n    uint256[2] memory amountIn,\\n    uint256[2] memory amountOutMin,\\n    uint256 _deadline\\n  ) internal {\\n    address _liquidityRouter = liquidityRouter; // gas optimisation\\n    IERC20(path[0]).safeApprove(_liquidityRouter, amountIn[0]);\\n    IERC20(path[1]).safeApprove(_liquidityRouter, amountIn[1]);\\n    IUniswapV2Router02(_liquidityRouter).addLiquidity(\\n      path[0],\\n      path[1],\\n      amountIn[0],\\n      amountIn[1],\\n      amountOutMin[0],\\n      amountOutMin[1],\\n      address(this),\\n      _deadline\\n    );\\n  }\\n\\n  function run(\\n    uint256 gasFee,\\n    uint256 _deadline,\\n    uint256[2] memory _outMin\\n  ) external bill(gasFee, \\\"AvaxSmartcoinMasterChefJoeLPRestake\\\") {\\n    IMasterChefJoeV2 _staking = staking; // gas optimization\\n    (uint256 pendingJoe, , , ) = _staking.pendingTokens(pool, address(this));\\n    require(pendingJoe > 0, \\\"MasterChefJoeLpRestake::run: no earned\\\");\\n\\n    _staking.deposit(pool, 0); // get all reward\\n    uint256 rewardAmount = rewardToken.balanceOf(address(this));\\n    rewardToken.safeApprove(liquidityRouter, rewardAmount);\\n\\n    IUniswapV2Pair _stakingToken = IUniswapV2Pair(address(stakingToken));\\n    address[2] memory tokens = [_stakingToken.token0(), _stakingToken.token1()];\\n    uint256[2] memory amountIn = [\\n      _swap([address(rewardToken), tokens[0]], [rewardAmount / 2, _outMin[0]], _deadline),\\n      _swap([address(rewardToken), tokens[1]], [rewardAmount - rewardAmount / 2, _outMin[1]], _deadline)\\n    ];\\n    uint256[2] memory amountOutMin = [uint256(0), uint256(0)];\\n\\n    _addLiquidity([tokens[0], tokens[1]], amountIn, amountOutMin, _deadline);\\n    uint256 stakingAmount = _stakingToken.balanceOf(address(this));\\n    stakingToken.safeApprove(address(_staking), stakingAmount);\\n    _staking.deposit(pool, stakingAmount);\\n  }\\n}\\n\",\"keccak256\":\"0x1420b9f78b7e6bf00ff0dd6d2fa60e9adcae62463fc93a2f3a94e42f42d2686e\",\"license\":\"BSD-3-Clause\"},\"automates/utils/DFH/Automate.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./proxy/ERC1167.sol\\\";\\nimport \\\"./IStorage.sol\\\";\\nimport \\\"./IBalance.sol\\\";\\n\\n// solhint-disable avoid-tx-origin\\nabstract contract Automate {\\n  using ERC1167 for address;\\n\\n  /// @notice Storage contract address.\\n  address internal _info;\\n\\n  /// @notice Contract owner.\\n  address internal _owner;\\n\\n  /// @notice Is contract paused.\\n  bool internal _paused;\\n\\n  /// @notice Protocol fee in USD (-1 if value in global storage).\\n  int256 internal _protocolFee;\\n\\n  /// @notice Is contract already initialized.\\n  bool internal _initialized;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  event ProtocolFeeChanged(int256 protocolFee);\\n\\n  constructor(address __info) {\\n    _info = __info;\\n    _owner = tx.origin;\\n    _protocolFee = -1;\\n  }\\n\\n  /**\\n   * @notice Returns address of Storage contract.\\n   */\\n  function info() public view returns (address) {\\n    address impl = address(this).implementation();\\n    if (impl == address(this)) return _info;\\n\\n    return Automate(impl).info();\\n  }\\n\\n  /// @dev Modifier to protect an initializer function from being invoked twice.\\n  modifier initializer() {\\n    if (_owner == address(0)) {\\n      _owner = tx.origin;\\n      _protocolFee = -1;\\n    } else {\\n      require(_owner == msg.sender, \\\"Automate: caller is not the owner\\\");\\n    }\\n    _;\\n    _initialized = true;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(_owner == msg.sender, \\\"Automate: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) external onlyOwner {\\n    require(address(this).implementation() == address(this), \\\"Automate: change the owner failed\\\");\\n\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the pauser.\\n   */\\n  modifier onlyPauser() {\\n    if (address(this).implementation() == address(this)) {\\n      address pauser = IStorage(info()).getAddress(keccak256(\\\"DFH:Pauser\\\"));\\n      require(msg.sender == _owner || msg.sender == pauser, \\\"Automate: caller is not the pauser\\\");\\n    } else {\\n      require(msg.sender == _owner, \\\"Automate: caller is not the pauser\\\");\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Returns true if the contract is paused, and false otherwise.\\n   */\\n  function paused() public view returns (bool) {\\n    address impl = address(this).implementation();\\n    if (impl == address(this)) return _paused;\\n\\n    return _paused || Automate(impl).paused();\\n  }\\n\\n  /**\\n   * @dev Throws if contract unpaused.\\n   */\\n  modifier whenPaused() {\\n    require(paused(), \\\"Automate: not paused\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Throws if contract paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused(), \\\"Automate: paused\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Pause contract.\\n   */\\n  function pause() external onlyPauser whenNotPaused {\\n    _paused = true;\\n  }\\n\\n  /**\\n   * @notice Unpause contract.\\n   */\\n  function unpause() external onlyPauser whenPaused {\\n    _paused = false;\\n  }\\n\\n  /**\\n   * @return Current protocol fee.\\n   */\\n  function protocolFee() public view returns (uint256) {\\n    address impl = address(this).implementation();\\n    if (impl != address(this) && _protocolFee < 0) {\\n      return Automate(impl).protocolFee();\\n    }\\n\\n    IStorage __info = IStorage(info());\\n    uint256 feeOnUSD = _protocolFee < 0 ? __info.getUint(keccak256(\\\"DFH:Fee:Automate\\\")) : uint256(_protocolFee);\\n    if (feeOnUSD == 0) return 0;\\n\\n    (, int256 price, , , ) = AggregatorV3Interface(__info.getAddress(keccak256(\\\"DFH:Fee:PriceFeed\\\"))).latestRoundData();\\n    require(price > 0, \\\"Automate: invalid price\\\");\\n\\n    return (feeOnUSD * 1e18) / uint256(price);\\n  }\\n\\n  /**\\n   * @notice Change protocol fee.\\n   * @param __protocolFee New protocol fee.\\n   */\\n  function changeProtocolFee(int256 __protocolFee) external {\\n    address impl = address(this).implementation();\\n    require(\\n      (impl == address(this) ? _owner : Automate(impl).owner()) == msg.sender,\\n      \\\"Automate::changeProtocolFee: caller is not the protocol owner\\\"\\n    );\\n\\n    _protocolFee = __protocolFee;\\n    emit ProtocolFeeChanged(__protocolFee);\\n  }\\n\\n  /**\\n   * @dev Claim fees from owner.\\n   * @param gasFee Claim gas fee.\\n   * @param operation Claim description.\\n   */\\n  function _bill(uint256 gasFee, string memory operation) internal whenNotPaused returns (uint256) {\\n    address account = owner(); // gas optimisation\\n    if (tx.origin == account) return 0; // free if called by the owner\\n\\n    IStorage __info = IStorage(info());\\n\\n    address balance = __info.getAddress(keccak256(\\\"DFH:Contract:Balance\\\"));\\n    require(balance != address(0), \\\"Automate::_bill: balance contract not found\\\");\\n\\n    return IBalance(balance).claim(account, gasFee, protocolFee(), operation);\\n  }\\n\\n  /**\\n   * @dev Claim fees from owner.\\n   * @param gasFee Claim gas fee.\\n   * @param operation Claim description.\\n   */\\n  modifier bill(uint256 gasFee, string memory operation) {\\n    _bill(gasFee, operation);\\n    _;\\n  }\\n\\n  /**\\n   * @notice Transfer ERC20 token to recipient.\\n   * @param token The address of the token to be transferred.\\n   * @param recipient Token recipient address.\\n   * @param amount Transferred amount of tokens.\\n   */\\n  function transfer(\\n    address token,\\n    address recipient,\\n    uint256 amount\\n  ) external onlyOwner {\\n    IERC20(token).transfer(recipient, amount);\\n  }\\n}\\n\",\"keccak256\":\"0xb0b26358673f6750ee6eef40b1a9668a3dc2965ffb1e1d777c3c8ca8cc2ce5a5\",\"license\":\"BSD-3-Clause\"},\"automates/utils/DFH/IBalance.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\ninterface IBalance {\\n  function claim(\\n    address account,\\n    uint256 gasFee,\\n    uint256 protocolFee,\\n    string memory description\\n  ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xaa996ebfd96fa304ff8c51b240819815ea9cb1b27a250319c57cac7b597be6cc\",\"license\":\"BSD-3-Clause\"},\"automates/utils/DFH/IStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\ninterface IStorage {\\n  function getBytes(bytes32 key) external view returns (bytes memory);\\n\\n  function getBool(bytes32 key) external view returns (bool);\\n\\n  function getUint(bytes32 key) external view returns (uint256);\\n\\n  function getInt(bytes32 key) external view returns (int256);\\n\\n  function getAddress(bytes32 key) external view returns (address);\\n\\n  function getString(bytes32 key) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xc3f6f2d80c27a1d5abbf6f6df55c96a315cdf7887b589c9ef5d45d036c56aa76\",\"license\":\"BSD-3-Clause\"},\"automates/utils/DFH/proxy/ERC1167.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable no-inline-assembly\\nlibrary ERC1167 {\\n  bytes public constant CLONE =\\n    hex\\\"363d3d373d3d3d363d73bebebebebebebebebebebebebebebebebebebebe5af43d82803e903d91602b57fd5bf3\\\";\\n\\n  /**\\n   * @notice Make new proxy contract.\\n   * @param impl Address prototype contract.\\n   * @return proxy Address new proxy contract.\\n   */\\n  function clone(address impl) external returns (address proxy) {\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(ptr, 0x14), shl(0x60, impl))\\n      mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n      proxy := create(0, ptr, 0x37)\\n    }\\n    require(proxy != address(0), \\\"ERC1167: create failed\\\");\\n  }\\n\\n  /**\\n   * @notice Returns address of prototype contract for proxy.\\n   * @param proxy Address proxy contract.\\n   * @return impl Address prototype contract (current contract address if not proxy).\\n   */\\n  function implementation(address proxy) external view returns (address impl) {\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(proxy)\\n    }\\n\\n    impl = proxy;\\n    if (size <= 45 && size >= 41) {\\n      bool matches = true;\\n      uint256 i;\\n\\n      bytes memory code;\\n      assembly {\\n        code := mload(0x40)\\n        mstore(0x40, add(code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n        mstore(code, size)\\n        extcodecopy(proxy, add(code, 0x20), 0, size)\\n      }\\n      for (i = 0; matches && i < 9; i++) {\\n        matches = code[i] == CLONE[i];\\n      }\\n      for (i = 0; matches && i < 15; i++) {\\n        if (i == 4) {\\n          matches = code[code.length - i - 1] == bytes1(uint8(CLONE[45 - i - 1]) - uint8(45 - size));\\n        } else {\\n          matches = code[code.length - i - 1] == CLONE[45 - i - 1];\\n        }\\n      }\\n      if (code[9] != bytes1(0x73 - uint8(45 - size))) {\\n        matches = false;\\n      }\\n      uint256 forwardedToBuffer;\\n      if (matches) {\\n        assembly {\\n          forwardedToBuffer := mload(add(code, 30))\\n        }\\n        forwardedToBuffer &= (0x1 << (20 * 8)) - 1;\\n        impl = address(uint160(forwardedToBuffer >> ((45 - size) * 8)));\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x766f43e1832068a2a230f9bc19db0b190f638c4b0acb2dc689da07d43a45675f\",\"license\":\"BSD-3-Clause\"},\"automates/utils/ERC20Tools.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary ERC20Tools {\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 allowance = token.allowance(address(this), spender);\\n    if (allowance != 0 && allowance < value) {\\n      token.approve(spender, 0);\\n    }\\n    if (allowance != value) {\\n      token.approve(spender, value);\\n    }\\n  }\\n\\n  function safeApproveAll(IERC20 token, address spender) internal {\\n    safeApprove(token, spender, 2**256 - 1);\\n  }\\n}\\n\",\"keccak256\":\"0x099bc27ecc2cbc3474fca81003c55eac408130fb911f21364d9f3dec9afc0620\",\"license\":\"BSD-3-Clause\"},\"automates/utils/Uniswap/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// solhint-disable func-name-mixedcase\\ninterface IUniswapV2Pair is IERC20 {\\n  function nonces(address owner) external view returns (uint256);\\n\\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    );\\n\\n  function price0CumulativeLast() external view returns (uint256);\\n\\n  function price1CumulativeLast() external view returns (uint256);\\n\\n  function kLast() external view returns (uint256);\\n\\n  function mint(address to) external returns (uint256 liquidity);\\n\\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n  function swap(\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address to,\\n    bytes calldata data\\n  ) external;\\n}\\n\",\"keccak256\":\"0x562becce443b899cba13f76266d689bda17a0a1d457af045762848aa552037ac\",\"license\":\"BSD-3-Clause\"},\"automates/utils/Uniswap/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable func-name-mixedcase\\ninterface IUniswapV2Router02 {\\n  function factory() external view returns (address);\\n\\n  function WETH() external view returns (address);\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 amountADesired,\\n    uint256 amountBDesired,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    returns (\\n      uint256 amountA,\\n      uint256 amountB,\\n      uint256 liquidity\\n    );\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint256 amountTokenDesired,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    payable\\n    returns (\\n      uint256 amountToken,\\n      uint256 amountETH,\\n      uint256 liquidity\\n    );\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETH(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function removeLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETHWithPermit(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function swapExactTokensForTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactTokens(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactETHForTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactETH(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactTokensForETH(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapETHForExactTokens(\\n    uint256 amountOut,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) external pure returns (uint256 amountB);\\n\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountOut);\\n\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountIn);\\n\\n  function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n  function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountETH);\\n\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountETH);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable;\\n\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n}\\n\",\"keccak256\":\"0xf12b9639d5053651c2416527a638fd3168276feb207265374d87574a9a312f75\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003f9a38038062003f9a833981016040819052620000349162000069565b600080546001600160a01b039092166001600160a01b031992831617905560018054909116321790556000196002556200009b565b6000602082840312156200007c57600080fd5b81516001600160a01b03811681146200009457600080fd5b9392505050565b613eef80620000ab6000396000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c80638456cb59116100d8578063beabacc81161008c578063dd92555111610066578063dd92555114610308578063f2fde38b1461031b578063f7c618c11461032e57600080fd5b8063beabacc8146102e5578063d0e30db0146102f8578063db2e21bc1461030057600080fd5b80639742b5c3116100bd5780639742b5c3146102b7578063b0e21e8a146102ca578063b838d914146102d257600080fd5b80638456cb59146102915780638da5cb5b1461029957600080fd5b80633f4ba83a1161012f578063590e1ae311610114578063590e1ae3146102495780635c975abb1461025157806372f702f31461026957600080fd5b80633f4ba83a1461021a5780634cf088d91461022457600080fd5b806329dcb0cf1161016057806329dcb0cf146101dd578063370158ea146102045780633e032a3b1461020c57600080fd5b806316f0115b1461017c5780632470294414610198575b600080fd5b61018560055481565b6040519081526020015b60405180910390f35b6004546101b89073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161018f565b6006546101f19062010000900461ffff1681565b60405161ffff909116815260200161018f565b6101b861034e565b6006546101f19061ffff1681565b6102226104b0565b005b6003546101b890610100900473ffffffffffffffffffffffffffffffffffffffff1681565b610222610847565b610259610d14565b604051901515815260200161018f565b6006546101b890640100000000900473ffffffffffffffffffffffffffffffffffffffff1681565b610222610e99565b60015473ffffffffffffffffffffffffffffffffffffffff166101b8565b6102226102c536600461392b565b611243565b61018561147d565b6102226102e03660046137fa565b61188a565b6102226102f33660046137b9565b611eda565b610222611fdc565b6102226121f6565b610222610316366004613ae5565b6125f4565b61022261032936600461377f565b612cfa565b6007546101b89073ffffffffffffffffffffffffffffffffffffffff1681565b6040517f6b880718000000000000000000000000000000000000000000000000000000008152306004820152600090819073bbaDa894933398c1Fca03bdd8B872bb444A483f290636b8807189060240160206040518083038186803b1580156103b657600080fd5b505af41580156103ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ee919061379c565b905073ffffffffffffffffffffffffffffffffffffffff811630141561042c57505060005473ffffffffffffffffffffffffffffffffffffffff1690565b8073ffffffffffffffffffffffffffffffffffffffff1663370158ea6040518163ffffffff1660e01b815260040160206040518083038186803b15801561047257600080fd5b505afa158015610486573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104aa919061379c565b91505090565b6040517f6b88071800000000000000000000000000000000000000000000000000000000815230600482018190529073bbaDa894933398c1Fca03bdd8B872bb444A483f290636b8807189060240160206040518083038186803b15801561051657600080fd5b505af415801561052a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054e919061379c565b73ffffffffffffffffffffffffffffffffffffffff16141561070857600061057461034e565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527f689d13d8ed8ef1027633ba26e7121121cf427434450a529548f19bf175974395600482015273ffffffffffffffffffffffffffffffffffffffff91909116906321f8a7219060240160206040518083038186803b1580156105fb57600080fd5b505afa15801561060f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610633919061379c565b60015490915073ffffffffffffffffffffffffffffffffffffffff1633148061067157503373ffffffffffffffffffffffffffffffffffffffff8216145b610702576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f657200000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b506107af565b60015473ffffffffffffffffffffffffffffffffffffffff1633146107af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f657200000000000000000000000000000000000000000000000000000000000060648201526084016106f9565b6107b7610d14565b61081d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4175746f6d6174653a206e6f742070617573656400000000000000000000000060448201526064016106f9565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff169055565b60015473ffffffffffffffffffffffffffffffffffffffff1633146108ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016106f9565b60035473ffffffffffffffffffffffffffffffffffffffff61010090910416600061092e60015473ffffffffffffffffffffffffffffffffffffffff1690565b6005546040517f93f1a40b000000000000000000000000000000000000000000000000000000008152600481019190915230602482015290915060009073ffffffffffffffffffffffffffffffffffffffff8416906393f1a40b90604401604080518083038186803b1580156109a357600080fd5b505afa1580156109b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109db91906139c3565b60055481516040517f441a3e700000000000000000000000000000000000000000000000000000000081526004810192909252602482015290915073ffffffffffffffffffffffffffffffffffffffff84169063441a3e7090604401600060405180830381600087803b158015610a5157600080fd5b505af1158015610a65573d6000803e3d6000fd5b50506006546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015264010000000090910473ffffffffffffffffffffffffffffffffffffffff16925063a9059cbb9150849083906370a082319060240160206040518083038186803b158015610ae357600080fd5b505afa158015610af7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1b91906139f5565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381600087803b158015610b8657600080fd5b505af1158015610b9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbe9190613909565b506007546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb90849083906370a082319060240160206040518083038186803b158015610c3257600080fd5b505afa158015610c46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6a91906139f5565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff909216600483015260248201526044015b602060405180830381600087803b158015610cd657600080fd5b505af1158015610cea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0e9190613909565b50505050565b6040517f6b880718000000000000000000000000000000000000000000000000000000008152306004820152600090819073bbaDa894933398c1Fca03bdd8B872bb444A483f290636b8807189060240160206040518083038186803b158015610d7c57600080fd5b505af4158015610d90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db4919061379c565b905073ffffffffffffffffffffffffffffffffffffffff8116301415610df757505060015474010000000000000000000000000000000000000000900460ff1690565b60015474010000000000000000000000000000000000000000900460ff16806104aa57508073ffffffffffffffffffffffffffffffffffffffff16635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e6157600080fd5b505afa158015610e75573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104aa9190613909565b6040517f6b88071800000000000000000000000000000000000000000000000000000000815230600482018190529073bbaDa894933398c1Fca03bdd8B872bb444A483f290636b8807189060240160206040518083038186803b158015610eff57600080fd5b505af4158015610f13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f37919061379c565b73ffffffffffffffffffffffffffffffffffffffff1614156110ec576000610f5d61034e565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527f689d13d8ed8ef1027633ba26e7121121cf427434450a529548f19bf175974395600482015273ffffffffffffffffffffffffffffffffffffffff91909116906321f8a7219060240160206040518083038186803b158015610fe457600080fd5b505afa158015610ff8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101c919061379c565b60015490915073ffffffffffffffffffffffffffffffffffffffff1633148061105a57503373ffffffffffffffffffffffffffffffffffffffff8216145b6110e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f657200000000000000000000000000000000000000000000000000000000000060648201526084016106f9565b50611193565b60015473ffffffffffffffffffffffffffffffffffffffff163314611193576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f657200000000000000000000000000000000000000000000000000000000000060648201526084016106f9565b61119b610d14565b15611202576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4175746f6d6174653a207061757365640000000000000000000000000000000060448201526064016106f9565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000179055565b6040517f6b88071800000000000000000000000000000000000000000000000000000000815230600482015260009073bbaDa894933398c1Fca03bdd8B872bb444A483f290636b8807189060240160206040518083038186803b1580156112a957600080fd5b505af41580156112bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e1919061379c565b90503373ffffffffffffffffffffffffffffffffffffffff82163014611384578173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561134757600080fd5b505afa15801561135b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137f919061379c565b61139e565b60015473ffffffffffffffffffffffffffffffffffffffff165b73ffffffffffffffffffffffffffffffffffffffff1614611441576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603d60248201527f4175746f6d6174653a3a6368616e676550726f746f636f6c4665653a2063616c60448201527f6c6572206973206e6f74207468652070726f746f636f6c206f776e657200000060648201526084016106f9565b60028290556040518281527f3c1d43943224e49d951ce8295a5c8332b517083b3f89bed50feae2cb39caebb59060200160405180910390a15050565b6040517f6b880718000000000000000000000000000000000000000000000000000000008152306004820152600090819073bbaDa894933398c1Fca03bdd8B872bb444A483f290636b8807189060240160206040518083038186803b1580156114e557600080fd5b505af41580156114f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151d919061379c565b905073ffffffffffffffffffffffffffffffffffffffff8116301480159061154757506000600254125b156115ca578073ffffffffffffffffffffffffffffffffffffffff1663b0e21e8a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561159257600080fd5b505afa1580156115a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104aa91906139f5565b60006115d461034e565b9050600080600254126115e9576002546116a6565b6040517fbd02d0f50000000000000000000000000000000000000000000000000000000081527fa93d95f96a5de25d7a41ddf1f5e8d45cfc929c4838163cf011dab4043a4a40d5600482015273ffffffffffffffffffffffffffffffffffffffff83169063bd02d0f59060240160206040518083038186803b15801561166e57600080fd5b505afa158015611682573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a691906139f5565b9050806116b7576000935050505090565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527f65c90423fe7c880476633a7e36521740f87199d233dc56eb4ca6643eb76f605f600482015260009073ffffffffffffffffffffffffffffffffffffffff8416906321f8a7219060240160206040518083038186803b15801561173f57600080fd5b505afa158015611753573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611777919061379c565b73ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156117bc57600080fd5b505afa1580156117d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f49190613b8f565b50505091505060008113611864576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4175746f6d6174653a20696e76616c696420707269636500000000000000000060448201526064016106f9565b8061187783670de0b6b3a7640000613d8d565b6118819190613d52565b94505050505090565b60015473ffffffffffffffffffffffffffffffffffffffff166118fa57600180547fffffffffffffffffffffffff000000000000000000000000000000000000000016321790557fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6002556119a1565b60015473ffffffffffffffffffffffffffffffffffffffff1633146119a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016106f9565b60035460ff1615806119d2575060035473ffffffffffffffffffffffffffffffffffffffff86811661010090920416145b611a85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526044602482018190527f4d6173746572436865664a6f654c7052657374616b653a3a696e69743a207265908201527f696e697469616c697a65207374616b696e67206164647265737320666f72626960648201527f6464656e00000000000000000000000000000000000000000000000000000000608482015260a4016106f9565b6003805473ffffffffffffffffffffffffffffffffffffffff8716610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff8216811790925560ff9182169116171580611afa575060045473ffffffffffffffffffffffffffffffffffffffff8581169116145b611bac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604d60248201527f4d6173746572436865664a6f654c7052657374616b653a3a696e69743a20726560448201527f696e697469616c697a65206c697175696469747920726f75746572206164647260648201527f65737320666f7262696464656e00000000000000000000000000000000000000608482015260a4016106f9565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff861617905560035460ff161580611bff575082600554145b611c8b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603f60248201527f4d6173746572436865664a6f654c7052657374616b653a3a696e69743a20726560448201527f696e697469616c697a6520706f6f6c20696e64657820666f7262696464656e0060648201526084016106f9565b60058390556006805461ffff83811662010000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000009092169085161717905560035460ff16611ea8576003546005546040517f1526fe270000000000000000000000000000000000000000000000000000000081526004810191909152600091610100900473ffffffffffffffffffffffffffffffffffffffff1690631526fe279060240160a06040518083038186803b158015611d4857600080fd5b505afa158015611d5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d809190613944565b8051600680547fffffffffffffffff0000000000000000000000000000000000000000ffffffff1664010000000073ffffffffffffffffffffffffffffffffffffffff93841602179055600354604080517fb985a3a000000000000000000000000000000000000000000000000000000000815290519394506101009091049091169163b985a3a091600480820192602092909190829003018186803b158015611e2957600080fd5b505afa158015611e3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e61919061379c565b600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055505b5050600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314611f81576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016106f9565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526024820183905284169063a9059cbb90604401610cbc565b60015473ffffffffffffffffffffffffffffffffffffffff163314612083576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016106f9565b6006546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015264010000000090910473ffffffffffffffffffffffffffffffffffffffff169060009082906370a082319060240160206040518083038186803b1580156120f857600080fd5b505afa15801561210c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213091906139f5565b60035490915061215f9073ffffffffffffffffffffffffffffffffffffffff8481169161010090041683612f59565b6003546005546040517fe2bbb15800000000000000000000000000000000000000000000000000000000815260048101919091526024810183905261010090910473ffffffffffffffffffffffffffffffffffffffff169063e2bbb15890604401600060405180830381600087803b1580156121da57600080fd5b505af11580156121ee573d6000803e3d6000fd5b505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff16331461229d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016106f9565b60006122be60015473ffffffffffffffffffffffffffffffffffffffff1690565b6003546005546040517f5312ea8e0000000000000000000000000000000000000000000000000000000081526004810191909152919250610100900473ffffffffffffffffffffffffffffffffffffffff1690635312ea8e90602401600060405180830381600087803b15801561233457600080fd5b505af1158015612348573d6000803e3d6000fd5b50506006546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015264010000000090910473ffffffffffffffffffffffffffffffffffffffff16925063a9059cbb9150839083906370a082319060240160206040518083038186803b1580156123c657600080fd5b505afa1580156123da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123fe91906139f5565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381600087803b15801561246957600080fd5b505af115801561247d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a19190613909565b506007546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb90839083906370a082319060240160206040518083038186803b15801561251557600080fd5b505afa158015612529573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254d91906139f5565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381600087803b1580156125b857600080fd5b505af11580156125cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125f09190613909565b5050565b82604051806060016040528060238152602001613ec0602391396126188282613177565b506003546005546040517fffcd4263000000000000000000000000000000000000000000000000000000008152600481019190915230602482015261010090910473ffffffffffffffffffffffffffffffffffffffff1690600090829063ffcd42639060440160006040518083038186803b15801561269657600080fd5b505afa1580156126aa573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526126f09190810190613a0e565b505050905060008111612785576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4d6173746572436865664a6f654c7052657374616b653a3a72756e3a206e6f2060448201527f6561726e6564000000000000000000000000000000000000000000000000000060648201526084016106f9565b6005546040517fe2bbb15800000000000000000000000000000000000000000000000000000000815260048101919091526000602482015273ffffffffffffffffffffffffffffffffffffffff83169063e2bbb15890604401600060405180830381600087803b1580156127f857600080fd5b505af115801561280c573d6000803e3d6000fd5b50506007546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000935073ffffffffffffffffffffffffffffffffffffffff90911691506370a082319060240160206040518083038186803b15801561287c57600080fd5b505afa158015612890573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128b491906139f5565b6004546007549192506128e19173ffffffffffffffffffffffffffffffffffffffff908116911683612f59565b6000600660049054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600060405180604001604052808373ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561295b57600080fd5b505afa15801561296f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612993919061379c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015612a0a57600080fd5b505afa158015612a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a42919061379c565b73ffffffffffffffffffffffffffffffffffffffff908116909152604080516080810182526007548316818301908152845190931660608201528151808301909252929350600092918291612ab4919080612a9e60028b613d52565b81526020018e60005b602002015190528e613449565b815260408051808201825260075473ffffffffffffffffffffffffffffffffffffffff908116825260208781015190911681830152825180840190935290920191612b1c9180612b0560028b613d52565b612b0f908b613dca565b81526020018e6001612aa7565b8152509050600060405180604001604052806000815260200160008152509050612b91604051806040016040528085600060028110612b5d57612b5d613e3c565b6020908102919091015173ffffffffffffffffffffffffffffffffffffffff9081168352878201511691015283838e6135fc565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8616906370a082319060240160206040518083038186803b158015612bf957600080fd5b505afa158015612c0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c3191906139f5565b600654909150612c6090640100000000900473ffffffffffffffffffffffffffffffffffffffff168983612f59565b6005546040517fe2bbb15800000000000000000000000000000000000000000000000000000000815260048101919091526024810182905273ffffffffffffffffffffffffffffffffffffffff89169063e2bbb15890604401600060405180830381600087803b158015612cd357600080fd5b505af1158015612ce7573d6000803e3d6000fd5b5050505050505050505050505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314612da1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016106f9565b6040517f6b88071800000000000000000000000000000000000000000000000000000000815230600482018190529073bbaDa894933398c1Fca03bdd8B872bb444A483f290636b8807189060240160206040518083038186803b158015612e0757600080fd5b505af4158015612e1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e3f919061379c565b73ffffffffffffffffffffffffffffffffffffffff1614612ee2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a206368616e676520746865206f776e6572206661696c6560448201527f640000000000000000000000000000000000000000000000000000000000000060648201526084016106f9565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff83811660248301526000919085169063dd62ed3e9060440160206040518083038186803b158015612fca57600080fd5b505afa158015612fde573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061300291906139f5565b9050801580159061301257508181105b156130c1576040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526000602483015285169063095ea7b390604401602060405180830381600087803b15801561308757600080fd5b505af115801561309b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130bf9190613909565b505b818114610d0e576040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526024820184905285169063095ea7b390604401602060405180830381600087803b15801561313857600080fd5b505af115801561314c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131709190613909565b5050505050565b6000613181610d14565b156131e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4175746f6d6174653a207061757365640000000000000000000000000000000060448201526064016106f9565b600061320960015473ffffffffffffffffffffffffffffffffffffffff1690565b90503273ffffffffffffffffffffffffffffffffffffffff82161415613233576000915050613443565b600061323d61034e565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527fe78c16c6d839536d3155985aab4e9c6013c8c3d446054bcebc48612f359d81f5600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906321f8a7219060240160206040518083038186803b1580156132c857600080fd5b505afa1580156132dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613300919061379c565b905073ffffffffffffffffffffffffffffffffffffffff81166133a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f4175746f6d6174653a3a5f62696c6c3a2062616c616e636520636f6e7472616360448201527f74206e6f7420666f756e6400000000000000000000000000000000000000000060648201526084016106f9565b8073ffffffffffffffffffffffffffffffffffffffff1663e578a22584886133cb61147d565b896040518563ffffffff1660e01b81526004016133eb9493929190613bd3565b602060405180830381600087803b15801561340557600080fd5b505af1158015613419573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061343d91906139f5565b93505050505b92915050565b6020830151835160009173ffffffffffffffffffffffffffffffffffffffff9182169116141561347b575081516135f5565b604080516002808252606082018352600092602083019080368337505086518251929350918391506000906134b2576134b2613e3c565b73ffffffffffffffffffffffffffffffffffffffff929092166020928302919091018201528501518151829060019081106134ef576134ef613e3c565b73ffffffffffffffffffffffffffffffffffffffff928316602091820292909201810191909152600480548751928801516040517f38ed173900000000000000000000000000000000000000000000000000000000815291909416936338ed173993613563939092879130918b9101613c4f565b600060405180830381600087803b15801561357d57600080fd5b505af1158015613591573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526135d7919081019061385c565b6001815181106135e9576135e9613e3c565b60200260200101519150505b9392505050565b60045473ffffffffffffffffffffffffffffffffffffffff166136478185600060200201518760005b602002015173ffffffffffffffffffffffffffffffffffffffff169190612f59565b61365b818560016020020151876001613625565b84516020808701518651878301518751938801516040517fe8e3370000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9687166004820152938616602485015260448401929092526064830152608482019290925260a48101919091523060c482015260e481018490529082169063e8e337009061010401606060405180830381600087803b15801561370c57600080fd5b505af1158015613720573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137449190613b61565b5050505050505050565b803561ffff8116811461376057600080fd5b919050565b805169ffffffffffffffffffff8116811461376057600080fd5b60006020828403121561379157600080fd5b81356135f581613e9a565b6000602082840312156137ae57600080fd5b81516135f581613e9a565b6000806000606084860312156137ce57600080fd5b83356137d981613e9a565b925060208401356137e981613e9a565b929592945050506040919091013590565b600080600080600060a0868803121561381257600080fd5b853561381d81613e9a565b9450602086013561382d81613e9a565b9350604086013592506138426060870161374e565b91506138506080870161374e565b90509295509295909350565b6000602080838503121561386f57600080fd5b825167ffffffffffffffff8082111561388757600080fd5b818501915085601f83011261389b57600080fd5b8151818111156138ad576138ad613e6b565b8060051b91506138be848301613d03565b8181528481019084860184860187018a10156138d957600080fd5b600095505b838610156138fc5780518352600195909501949186019186016138de565b5098975050505050505050565b60006020828403121561391b57600080fd5b815180151581146135f557600080fd5b60006020828403121561393d57600080fd5b5035919050565b600060a0828403121561395657600080fd5b60405160a0810181811067ffffffffffffffff8211171561397957613979613e6b565b604052825161398781613e9a565b8082525060208301516020820152604083015160408201526060830151606082015260808301516139b781613e9a565b60808201529392505050565b6000604082840312156139d557600080fd5b6139dd613cda565b82518152602083015160208201528091505092915050565b600060208284031215613a0757600080fd5b5051919050565b60008060008060808587031215613a2457600080fd5b845193506020850151613a3681613e9a565b604086015190935067ffffffffffffffff80821115613a5457600080fd5b818701915087601f830112613a6857600080fd5b815181811115613a7a57613a7a613e6b565b613aab60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601613d03565b9150808252886020828501011115613ac257600080fd5b613ad3816020840160208601613de1565b50606096909601519497939650505050565b600080600060808486031215613afa57600080fd5b83359250602080850135925085605f860112613b1557600080fd5b613b1d613cda565b806040870188608089011115613b3257600080fd5b60005b6002811015613b5257813584529284019290840190600101613b35565b50508093505050509250925092565b600080600060608486031215613b7657600080fd5b8351925060208401519150604084015190509250925092565b600080600080600060a08688031215613ba757600080fd5b613bb086613765565b945060208601519350604086015192506060860151915061385060808701613765565b73ffffffffffffffffffffffffffffffffffffffff851681528360208201528260408201526080606082015260008251806080840152613c1a8160a0850160208701613de1565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160a00195945050505050565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015613cac57845173ffffffffffffffffffffffffffffffffffffffff1683529383019391830191600101613c7a565b505073ffffffffffffffffffffffffffffffffffffffff969096166060850152505050608001529392505050565b6040805190810167ffffffffffffffff81118282101715613cfd57613cfd613e6b565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715613d4a57613d4a613e6b565b604052919050565b600082613d88577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613dc557613dc5613e0d565b500290565b600082821015613ddc57613ddc613e0d565b500390565b60005b83811015613dfc578181015183820152602001613de4565b83811115610d0e5750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114613ebc57600080fd5b5056fe41766178536d617274636f696e4d6173746572436865664a6f654c5052657374616b65a164736f6c6343000806000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101775760003560e01c80638456cb59116100d8578063beabacc81161008c578063dd92555111610066578063dd92555114610308578063f2fde38b1461031b578063f7c618c11461032e57600080fd5b8063beabacc8146102e5578063d0e30db0146102f8578063db2e21bc1461030057600080fd5b80639742b5c3116100bd5780639742b5c3146102b7578063b0e21e8a146102ca578063b838d914146102d257600080fd5b80638456cb59146102915780638da5cb5b1461029957600080fd5b80633f4ba83a1161012f578063590e1ae311610114578063590e1ae3146102495780635c975abb1461025157806372f702f31461026957600080fd5b80633f4ba83a1461021a5780634cf088d91461022457600080fd5b806329dcb0cf1161016057806329dcb0cf146101dd578063370158ea146102045780633e032a3b1461020c57600080fd5b806316f0115b1461017c5780632470294414610198575b600080fd5b61018560055481565b6040519081526020015b60405180910390f35b6004546101b89073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161018f565b6006546101f19062010000900461ffff1681565b60405161ffff909116815260200161018f565b6101b861034e565b6006546101f19061ffff1681565b6102226104b0565b005b6003546101b890610100900473ffffffffffffffffffffffffffffffffffffffff1681565b610222610847565b610259610d14565b604051901515815260200161018f565b6006546101b890640100000000900473ffffffffffffffffffffffffffffffffffffffff1681565b610222610e99565b60015473ffffffffffffffffffffffffffffffffffffffff166101b8565b6102226102c536600461392b565b611243565b61018561147d565b6102226102e03660046137fa565b61188a565b6102226102f33660046137b9565b611eda565b610222611fdc565b6102226121f6565b610222610316366004613ae5565b6125f4565b61022261032936600461377f565b612cfa565b6007546101b89073ffffffffffffffffffffffffffffffffffffffff1681565b6040517f6b880718000000000000000000000000000000000000000000000000000000008152306004820152600090819073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b1580156103b657600080fd5b505af41580156103ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ee919061379c565b905073ffffffffffffffffffffffffffffffffffffffff811630141561042c57505060005473ffffffffffffffffffffffffffffffffffffffff1690565b8073ffffffffffffffffffffffffffffffffffffffff1663370158ea6040518163ffffffff1660e01b815260040160206040518083038186803b15801561047257600080fd5b505afa158015610486573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104aa919061379c565b91505090565b6040517f6b88071800000000000000000000000000000000000000000000000000000000815230600482018190529073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b15801561051657600080fd5b505af415801561052a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054e919061379c565b73ffffffffffffffffffffffffffffffffffffffff16141561070857600061057461034e565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527f689d13d8ed8ef1027633ba26e7121121cf427434450a529548f19bf175974395600482015273ffffffffffffffffffffffffffffffffffffffff91909116906321f8a7219060240160206040518083038186803b1580156105fb57600080fd5b505afa15801561060f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610633919061379c565b60015490915073ffffffffffffffffffffffffffffffffffffffff1633148061067157503373ffffffffffffffffffffffffffffffffffffffff8216145b610702576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f657200000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b506107af565b60015473ffffffffffffffffffffffffffffffffffffffff1633146107af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f657200000000000000000000000000000000000000000000000000000000000060648201526084016106f9565b6107b7610d14565b61081d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4175746f6d6174653a206e6f742070617573656400000000000000000000000060448201526064016106f9565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff169055565b60015473ffffffffffffffffffffffffffffffffffffffff1633146108ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016106f9565b60035473ffffffffffffffffffffffffffffffffffffffff61010090910416600061092e60015473ffffffffffffffffffffffffffffffffffffffff1690565b6005546040517f93f1a40b000000000000000000000000000000000000000000000000000000008152600481019190915230602482015290915060009073ffffffffffffffffffffffffffffffffffffffff8416906393f1a40b90604401604080518083038186803b1580156109a357600080fd5b505afa1580156109b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109db91906139c3565b60055481516040517f441a3e700000000000000000000000000000000000000000000000000000000081526004810192909252602482015290915073ffffffffffffffffffffffffffffffffffffffff84169063441a3e7090604401600060405180830381600087803b158015610a5157600080fd5b505af1158015610a65573d6000803e3d6000fd5b50506006546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015264010000000090910473ffffffffffffffffffffffffffffffffffffffff16925063a9059cbb9150849083906370a082319060240160206040518083038186803b158015610ae357600080fd5b505afa158015610af7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1b91906139f5565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381600087803b158015610b8657600080fd5b505af1158015610b9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbe9190613909565b506007546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb90849083906370a082319060240160206040518083038186803b158015610c3257600080fd5b505afa158015610c46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6a91906139f5565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff909216600483015260248201526044015b602060405180830381600087803b158015610cd657600080fd5b505af1158015610cea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0e9190613909565b50505050565b6040517f6b880718000000000000000000000000000000000000000000000000000000008152306004820152600090819073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b158015610d7c57600080fd5b505af4158015610d90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db4919061379c565b905073ffffffffffffffffffffffffffffffffffffffff8116301415610df757505060015474010000000000000000000000000000000000000000900460ff1690565b60015474010000000000000000000000000000000000000000900460ff16806104aa57508073ffffffffffffffffffffffffffffffffffffffff16635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e6157600080fd5b505afa158015610e75573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104aa9190613909565b6040517f6b88071800000000000000000000000000000000000000000000000000000000815230600482018190529073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b158015610eff57600080fd5b505af4158015610f13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f37919061379c565b73ffffffffffffffffffffffffffffffffffffffff1614156110ec576000610f5d61034e565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527f689d13d8ed8ef1027633ba26e7121121cf427434450a529548f19bf175974395600482015273ffffffffffffffffffffffffffffffffffffffff91909116906321f8a7219060240160206040518083038186803b158015610fe457600080fd5b505afa158015610ff8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101c919061379c565b60015490915073ffffffffffffffffffffffffffffffffffffffff1633148061105a57503373ffffffffffffffffffffffffffffffffffffffff8216145b6110e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f657200000000000000000000000000000000000000000000000000000000000060648201526084016106f9565b50611193565b60015473ffffffffffffffffffffffffffffffffffffffff163314611193576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f657200000000000000000000000000000000000000000000000000000000000060648201526084016106f9565b61119b610d14565b15611202576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4175746f6d6174653a207061757365640000000000000000000000000000000060448201526064016106f9565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000179055565b6040517f6b88071800000000000000000000000000000000000000000000000000000000815230600482015260009073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b1580156112a957600080fd5b505af41580156112bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e1919061379c565b90503373ffffffffffffffffffffffffffffffffffffffff82163014611384578173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561134757600080fd5b505afa15801561135b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137f919061379c565b61139e565b60015473ffffffffffffffffffffffffffffffffffffffff165b73ffffffffffffffffffffffffffffffffffffffff1614611441576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603d60248201527f4175746f6d6174653a3a6368616e676550726f746f636f6c4665653a2063616c60448201527f6c6572206973206e6f74207468652070726f746f636f6c206f776e657200000060648201526084016106f9565b60028290556040518281527f3c1d43943224e49d951ce8295a5c8332b517083b3f89bed50feae2cb39caebb59060200160405180910390a15050565b6040517f6b880718000000000000000000000000000000000000000000000000000000008152306004820152600090819073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b1580156114e557600080fd5b505af41580156114f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151d919061379c565b905073ffffffffffffffffffffffffffffffffffffffff8116301480159061154757506000600254125b156115ca578073ffffffffffffffffffffffffffffffffffffffff1663b0e21e8a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561159257600080fd5b505afa1580156115a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104aa91906139f5565b60006115d461034e565b9050600080600254126115e9576002546116a6565b6040517fbd02d0f50000000000000000000000000000000000000000000000000000000081527fa93d95f96a5de25d7a41ddf1f5e8d45cfc929c4838163cf011dab4043a4a40d5600482015273ffffffffffffffffffffffffffffffffffffffff83169063bd02d0f59060240160206040518083038186803b15801561166e57600080fd5b505afa158015611682573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a691906139f5565b9050806116b7576000935050505090565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527f65c90423fe7c880476633a7e36521740f87199d233dc56eb4ca6643eb76f605f600482015260009073ffffffffffffffffffffffffffffffffffffffff8416906321f8a7219060240160206040518083038186803b15801561173f57600080fd5b505afa158015611753573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611777919061379c565b73ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156117bc57600080fd5b505afa1580156117d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f49190613b8f565b50505091505060008113611864576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4175746f6d6174653a20696e76616c696420707269636500000000000000000060448201526064016106f9565b8061187783670de0b6b3a7640000613d8d565b6118819190613d52565b94505050505090565b60015473ffffffffffffffffffffffffffffffffffffffff166118fa57600180547fffffffffffffffffffffffff000000000000000000000000000000000000000016321790557fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6002556119a1565b60015473ffffffffffffffffffffffffffffffffffffffff1633146119a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016106f9565b60035460ff1615806119d2575060035473ffffffffffffffffffffffffffffffffffffffff86811661010090920416145b611a85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526044602482018190527f4d6173746572436865664a6f654c7052657374616b653a3a696e69743a207265908201527f696e697469616c697a65207374616b696e67206164647265737320666f72626960648201527f6464656e00000000000000000000000000000000000000000000000000000000608482015260a4016106f9565b6003805473ffffffffffffffffffffffffffffffffffffffff8716610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff8216811790925560ff9182169116171580611afa575060045473ffffffffffffffffffffffffffffffffffffffff8581169116145b611bac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604d60248201527f4d6173746572436865664a6f654c7052657374616b653a3a696e69743a20726560448201527f696e697469616c697a65206c697175696469747920726f75746572206164647260648201527f65737320666f7262696464656e00000000000000000000000000000000000000608482015260a4016106f9565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff861617905560035460ff161580611bff575082600554145b611c8b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603f60248201527f4d6173746572436865664a6f654c7052657374616b653a3a696e69743a20726560448201527f696e697469616c697a6520706f6f6c20696e64657820666f7262696464656e0060648201526084016106f9565b60058390556006805461ffff83811662010000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000009092169085161717905560035460ff16611ea8576003546005546040517f1526fe270000000000000000000000000000000000000000000000000000000081526004810191909152600091610100900473ffffffffffffffffffffffffffffffffffffffff1690631526fe279060240160a06040518083038186803b158015611d4857600080fd5b505afa158015611d5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d809190613944565b8051600680547fffffffffffffffff0000000000000000000000000000000000000000ffffffff1664010000000073ffffffffffffffffffffffffffffffffffffffff93841602179055600354604080517fb985a3a000000000000000000000000000000000000000000000000000000000815290519394506101009091049091169163b985a3a091600480820192602092909190829003018186803b158015611e2957600080fd5b505afa158015611e3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e61919061379c565b600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055505b5050600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314611f81576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016106f9565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526024820183905284169063a9059cbb90604401610cbc565b60015473ffffffffffffffffffffffffffffffffffffffff163314612083576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016106f9565b6006546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015264010000000090910473ffffffffffffffffffffffffffffffffffffffff169060009082906370a082319060240160206040518083038186803b1580156120f857600080fd5b505afa15801561210c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213091906139f5565b60035490915061215f9073ffffffffffffffffffffffffffffffffffffffff8481169161010090041683612f59565b6003546005546040517fe2bbb15800000000000000000000000000000000000000000000000000000000815260048101919091526024810183905261010090910473ffffffffffffffffffffffffffffffffffffffff169063e2bbb15890604401600060405180830381600087803b1580156121da57600080fd5b505af11580156121ee573d6000803e3d6000fd5b505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff16331461229d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016106f9565b60006122be60015473ffffffffffffffffffffffffffffffffffffffff1690565b6003546005546040517f5312ea8e0000000000000000000000000000000000000000000000000000000081526004810191909152919250610100900473ffffffffffffffffffffffffffffffffffffffff1690635312ea8e90602401600060405180830381600087803b15801561233457600080fd5b505af1158015612348573d6000803e3d6000fd5b50506006546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015264010000000090910473ffffffffffffffffffffffffffffffffffffffff16925063a9059cbb9150839083906370a082319060240160206040518083038186803b1580156123c657600080fd5b505afa1580156123da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123fe91906139f5565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381600087803b15801561246957600080fd5b505af115801561247d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a19190613909565b506007546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb90839083906370a082319060240160206040518083038186803b15801561251557600080fd5b505afa158015612529573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254d91906139f5565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381600087803b1580156125b857600080fd5b505af11580156125cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125f09190613909565b5050565b82604051806060016040528060238152602001613ec0602391396126188282613177565b506003546005546040517fffcd4263000000000000000000000000000000000000000000000000000000008152600481019190915230602482015261010090910473ffffffffffffffffffffffffffffffffffffffff1690600090829063ffcd42639060440160006040518083038186803b15801561269657600080fd5b505afa1580156126aa573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526126f09190810190613a0e565b505050905060008111612785576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4d6173746572436865664a6f654c7052657374616b653a3a72756e3a206e6f2060448201527f6561726e6564000000000000000000000000000000000000000000000000000060648201526084016106f9565b6005546040517fe2bbb15800000000000000000000000000000000000000000000000000000000815260048101919091526000602482015273ffffffffffffffffffffffffffffffffffffffff83169063e2bbb15890604401600060405180830381600087803b1580156127f857600080fd5b505af115801561280c573d6000803e3d6000fd5b50506007546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000935073ffffffffffffffffffffffffffffffffffffffff90911691506370a082319060240160206040518083038186803b15801561287c57600080fd5b505afa158015612890573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128b491906139f5565b6004546007549192506128e19173ffffffffffffffffffffffffffffffffffffffff908116911683612f59565b6000600660049054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600060405180604001604052808373ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561295b57600080fd5b505afa15801561296f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612993919061379c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015612a0a57600080fd5b505afa158015612a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a42919061379c565b73ffffffffffffffffffffffffffffffffffffffff908116909152604080516080810182526007548316818301908152845190931660608201528151808301909252929350600092918291612ab4919080612a9e60028b613d52565b81526020018e60005b602002015190528e613449565b815260408051808201825260075473ffffffffffffffffffffffffffffffffffffffff908116825260208781015190911681830152825180840190935290920191612b1c9180612b0560028b613d52565b612b0f908b613dca565b81526020018e6001612aa7565b8152509050600060405180604001604052806000815260200160008152509050612b91604051806040016040528085600060028110612b5d57612b5d613e3c565b6020908102919091015173ffffffffffffffffffffffffffffffffffffffff9081168352878201511691015283838e6135fc565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8616906370a082319060240160206040518083038186803b158015612bf957600080fd5b505afa158015612c0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c3191906139f5565b600654909150612c6090640100000000900473ffffffffffffffffffffffffffffffffffffffff168983612f59565b6005546040517fe2bbb15800000000000000000000000000000000000000000000000000000000815260048101919091526024810182905273ffffffffffffffffffffffffffffffffffffffff89169063e2bbb15890604401600060405180830381600087803b158015612cd357600080fd5b505af1158015612ce7573d6000803e3d6000fd5b5050505050505050505050505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314612da1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016106f9565b6040517f6b88071800000000000000000000000000000000000000000000000000000000815230600482018190529073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b158015612e0757600080fd5b505af4158015612e1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e3f919061379c565b73ffffffffffffffffffffffffffffffffffffffff1614612ee2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a206368616e676520746865206f776e6572206661696c6560448201527f640000000000000000000000000000000000000000000000000000000000000060648201526084016106f9565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff83811660248301526000919085169063dd62ed3e9060440160206040518083038186803b158015612fca57600080fd5b505afa158015612fde573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061300291906139f5565b9050801580159061301257508181105b156130c1576040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526000602483015285169063095ea7b390604401602060405180830381600087803b15801561308757600080fd5b505af115801561309b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130bf9190613909565b505b818114610d0e576040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526024820184905285169063095ea7b390604401602060405180830381600087803b15801561313857600080fd5b505af115801561314c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131709190613909565b5050505050565b6000613181610d14565b156131e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4175746f6d6174653a207061757365640000000000000000000000000000000060448201526064016106f9565b600061320960015473ffffffffffffffffffffffffffffffffffffffff1690565b90503273ffffffffffffffffffffffffffffffffffffffff82161415613233576000915050613443565b600061323d61034e565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527fe78c16c6d839536d3155985aab4e9c6013c8c3d446054bcebc48612f359d81f5600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906321f8a7219060240160206040518083038186803b1580156132c857600080fd5b505afa1580156132dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613300919061379c565b905073ffffffffffffffffffffffffffffffffffffffff81166133a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f4175746f6d6174653a3a5f62696c6c3a2062616c616e636520636f6e7472616360448201527f74206e6f7420666f756e6400000000000000000000000000000000000000000060648201526084016106f9565b8073ffffffffffffffffffffffffffffffffffffffff1663e578a22584886133cb61147d565b896040518563ffffffff1660e01b81526004016133eb9493929190613bd3565b602060405180830381600087803b15801561340557600080fd5b505af1158015613419573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061343d91906139f5565b93505050505b92915050565b6020830151835160009173ffffffffffffffffffffffffffffffffffffffff9182169116141561347b575081516135f5565b604080516002808252606082018352600092602083019080368337505086518251929350918391506000906134b2576134b2613e3c565b73ffffffffffffffffffffffffffffffffffffffff929092166020928302919091018201528501518151829060019081106134ef576134ef613e3c565b73ffffffffffffffffffffffffffffffffffffffff928316602091820292909201810191909152600480548751928801516040517f38ed173900000000000000000000000000000000000000000000000000000000815291909416936338ed173993613563939092879130918b9101613c4f565b600060405180830381600087803b15801561357d57600080fd5b505af1158015613591573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526135d7919081019061385c565b6001815181106135e9576135e9613e3c565b60200260200101519150505b9392505050565b60045473ffffffffffffffffffffffffffffffffffffffff166136478185600060200201518760005b602002015173ffffffffffffffffffffffffffffffffffffffff169190612f59565b61365b818560016020020151876001613625565b84516020808701518651878301518751938801516040517fe8e3370000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9687166004820152938616602485015260448401929092526064830152608482019290925260a48101919091523060c482015260e481018490529082169063e8e337009061010401606060405180830381600087803b15801561370c57600080fd5b505af1158015613720573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137449190613b61565b5050505050505050565b803561ffff8116811461376057600080fd5b919050565b805169ffffffffffffffffffff8116811461376057600080fd5b60006020828403121561379157600080fd5b81356135f581613e9a565b6000602082840312156137ae57600080fd5b81516135f581613e9a565b6000806000606084860312156137ce57600080fd5b83356137d981613e9a565b925060208401356137e981613e9a565b929592945050506040919091013590565b600080600080600060a0868803121561381257600080fd5b853561381d81613e9a565b9450602086013561382d81613e9a565b9350604086013592506138426060870161374e565b91506138506080870161374e565b90509295509295909350565b6000602080838503121561386f57600080fd5b825167ffffffffffffffff8082111561388757600080fd5b818501915085601f83011261389b57600080fd5b8151818111156138ad576138ad613e6b565b8060051b91506138be848301613d03565b8181528481019084860184860187018a10156138d957600080fd5b600095505b838610156138fc5780518352600195909501949186019186016138de565b5098975050505050505050565b60006020828403121561391b57600080fd5b815180151581146135f557600080fd5b60006020828403121561393d57600080fd5b5035919050565b600060a0828403121561395657600080fd5b60405160a0810181811067ffffffffffffffff8211171561397957613979613e6b565b604052825161398781613e9a565b8082525060208301516020820152604083015160408201526060830151606082015260808301516139b781613e9a565b60808201529392505050565b6000604082840312156139d557600080fd5b6139dd613cda565b82518152602083015160208201528091505092915050565b600060208284031215613a0757600080fd5b5051919050565b60008060008060808587031215613a2457600080fd5b845193506020850151613a3681613e9a565b604086015190935067ffffffffffffffff80821115613a5457600080fd5b818701915087601f830112613a6857600080fd5b815181811115613a7a57613a7a613e6b565b613aab60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601613d03565b9150808252886020828501011115613ac257600080fd5b613ad3816020840160208601613de1565b50606096909601519497939650505050565b600080600060808486031215613afa57600080fd5b83359250602080850135925085605f860112613b1557600080fd5b613b1d613cda565b806040870188608089011115613b3257600080fd5b60005b6002811015613b5257813584529284019290840190600101613b35565b50508093505050509250925092565b600080600060608486031215613b7657600080fd5b8351925060208401519150604084015190509250925092565b600080600080600060a08688031215613ba757600080fd5b613bb086613765565b945060208601519350604086015192506060860151915061385060808701613765565b73ffffffffffffffffffffffffffffffffffffffff851681528360208201528260408201526080606082015260008251806080840152613c1a8160a0850160208701613de1565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160a00195945050505050565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015613cac57845173ffffffffffffffffffffffffffffffffffffffff1683529383019391830191600101613c7a565b505073ffffffffffffffffffffffffffffffffffffffff969096166060850152505050608001529392505050565b6040805190810167ffffffffffffffff81118282101715613cfd57613cfd613e6b565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715613d4a57613d4a613e6b565b604052919050565b600082613d88577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613dc557613dc5613e0d565b500290565b600082821015613ddc57613ddc613e0d565b500390565b60005b83811015613dfc578181015183820152602001613de4565b83811115610d0e5750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114613ebc57600080fd5b5056fe41766178536d617274636f696e4d6173746572436865664a6f654c5052657374616b65a164736f6c6343000806000a",
  "libraries": {
    "ERC1167": "0xbbaDa894933398c1Fca03bdd8B872bb444A483f2"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "changeProtocolFee(int256)": {
        "params": {
          "__protocolFee": "New protocol fee."
        }
      },
      "protocolFee()": {
        "returns": {
          "_0": "Current protocol fee."
        }
      },
      "transfer(address,address,uint256)": {
        "params": {
          "amount": "Transferred amount of tokens.",
          "recipient": "Token recipient address.",
          "token": "The address of the token to be transferred."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "changeProtocolFee(int256)": {
        "notice": "Change protocol fee."
      },
      "info()": {
        "notice": "Returns address of Storage contract."
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "pause()": {
        "notice": "Pause contract."
      },
      "paused()": {
        "notice": "Returns true if the contract is paused, and false otherwise."
      },
      "transfer(address,address,uint256)": {
        "notice": "Transfer ERC20 token to recipient."
      },
      "unpause()": {
        "notice": "Unpause contract."
      }
    },
    "notice": "Use with LP token only.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4892,
        "contract": "automates/avaxSmartcoin/MasterChefJoeLpRestake.automate.sol:MasterChefJoeLpRestake",
        "label": "_info",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4895,
        "contract": "automates/avaxSmartcoin/MasterChefJoeLpRestake.automate.sol:MasterChefJoeLpRestake",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4898,
        "contract": "automates/avaxSmartcoin/MasterChefJoeLpRestake.automate.sol:MasterChefJoeLpRestake",
        "label": "_paused",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 4901,
        "contract": "automates/avaxSmartcoin/MasterChefJoeLpRestake.automate.sol:MasterChefJoeLpRestake",
        "label": "_protocolFee",
        "offset": 0,
        "slot": "2",
        "type": "t_int256"
      },
      {
        "astId": 4904,
        "contract": "automates/avaxSmartcoin/MasterChefJoeLpRestake.automate.sol:MasterChefJoeLpRestake",
        "label": "_initialized",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 900,
        "contract": "automates/avaxSmartcoin/MasterChefJoeLpRestake.automate.sol:MasterChefJoeLpRestake",
        "label": "staking",
        "offset": 1,
        "slot": "3",
        "type": "t_contract(IMasterChefJoeV2)880"
      },
      {
        "astId": 902,
        "contract": "automates/avaxSmartcoin/MasterChefJoeLpRestake.automate.sol:MasterChefJoeLpRestake",
        "label": "liquidityRouter",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 904,
        "contract": "automates/avaxSmartcoin/MasterChefJoeLpRestake.automate.sol:MasterChefJoeLpRestake",
        "label": "pool",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 906,
        "contract": "automates/avaxSmartcoin/MasterChefJoeLpRestake.automate.sol:MasterChefJoeLpRestake",
        "label": "slippage",
        "offset": 0,
        "slot": "6",
        "type": "t_uint16"
      },
      {
        "astId": 908,
        "contract": "automates/avaxSmartcoin/MasterChefJoeLpRestake.automate.sol:MasterChefJoeLpRestake",
        "label": "deadline",
        "offset": 2,
        "slot": "6",
        "type": "t_uint16"
      },
      {
        "astId": 911,
        "contract": "automates/avaxSmartcoin/MasterChefJoeLpRestake.automate.sol:MasterChefJoeLpRestake",
        "label": "stakingToken",
        "offset": 4,
        "slot": "6",
        "type": "t_contract(IERC20)669"
      },
      {
        "astId": 914,
        "contract": "automates/avaxSmartcoin/MasterChefJoeLpRestake.automate.sol:MasterChefJoeLpRestake",
        "label": "rewardToken",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IERC20)669"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)669": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMasterChefJoeV2)880": {
        "encoding": "inplace",
        "label": "contract IMasterChefJoeV2",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}