{
  "language": "Solidity",
  "sources": {
    "contracts/Restake.automate.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./utils/DFH/Automate.sol\";\nimport \"./utils/DFH/IStorage.sol\";\nimport \"./utils/UniswapV3/INonfungiblePositionManager.sol\";\nimport \"./utils/UniswapV3/ISwapRouter.sol\";\nimport \"./utils/UniswapV3/IFactory.sol\";\nimport \"./utils/UniswapV3/StopLoss.sol\";\n\ncontract Restake is Automate {\n  using SafeERC20 for IERC20;\n  using StopLoss for StopLoss.Order;\n\n  address public positionManager;\n\n  address public liquidityRouter;\n\n  address public pool;\n\n  uint256 public tokenId;\n\n  uint16 public deadline;\n\n  StopLoss.Order public stopLoss;\n\n  // solhint-disable-next-line no-empty-blocks\n  constructor(address _info) Automate(_info) {}\n\n  modifier tokenDeposited() {\n    require(tokenId != 0, \"Restake::tokenDeposited: token not deposited\");\n    require(\n      INonfungiblePositionManager(positionManager).ownerOf(tokenId) == address(this),\n      \"Restake::tokenDeposited: token refunded\"\n    );\n    _;\n  }\n\n  function init(\n    address _positionManager,\n    address _liquidityRouter,\n    address _pool,\n    uint16 _deadline\n  ) external initializer {\n    require(\n      !_initialized || positionManager == _positionManager,\n      \"Restake::init: reinitialize position manager address forbidden\"\n    );\n    positionManager = _positionManager;\n    require(\n      !_initialized || liquidityRouter == _liquidityRouter,\n      \"Restake::init: reinitialize liquidity router address forbidden\"\n    );\n    liquidityRouter = _liquidityRouter;\n    require(!_initialized || pool == _pool, \"Restake::init: reinitialize pool address forbidden\");\n    pool = _pool;\n    deadline = _deadline;\n  }\n\n  function onERC721Received(\n    address,\n    address,\n    uint256,\n    bytes calldata\n  ) external pure returns (bytes4) {\n    return bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"));\n  }\n\n  function deposit(uint256 _tokenId) external onlyOwner {\n    require(tokenId == 0, \"Restake::deposit: token already deposited\");\n    tokenId = _tokenId;\n    INonfungiblePositionManager pm = INonfungiblePositionManager(positionManager);\n    (, , address token0, address token1, uint24 fee, , , , , , , ) = pm.positions(tokenId);\n    require(token0 != address(0), \"Restake::deposit: invalid token0 address\");\n    require(token1 != address(0), \"Restake::deposit: invalid token1 address\");\n    address tokenPool = IFactory(pm.factory()).getPool(token0, token1, fee);\n    require(tokenPool == pool, \"Restake::deposit: invalid pool address\");\n    pm.safeTransferFrom(msg.sender, address(this), tokenId);\n    pm.approve(msg.sender, tokenId);\n  }\n\n  function run(uint256 gasFee, uint256 _deadline) external tokenDeposited bill(gasFee, \"UniswapV3Restake\") {\n    uint256 _tokenId = tokenId;\n    INonfungiblePositionManager pm = INonfungiblePositionManager(positionManager);\n    (, , address token0, address token1, , , , , , , , ) = pm.positions(_tokenId);\n\n    pm.collect(\n      INonfungiblePositionManager.CollectParams({\n        tokenId: _tokenId,\n        recipient: address(this),\n        amount0Max: type(uint128).max,\n        amount1Max: type(uint128).max\n      })\n    );\n    uint256 amount0 = IERC20(token0).balanceOf(address(this));\n    uint256 amount1 = IERC20(token1).balanceOf(address(this));\n    require(amount0 > 0 || amount1 > 0, \"Restake::run: no earned\");\n    IERC20(token0).approve(address(pm), amount0);\n    IERC20(token1).approve(address(pm), amount1);\n    pm.increaseLiquidity(\n      INonfungiblePositionManager.IncreaseLiquidityParams({\n        tokenId: _tokenId,\n        amount0Desired: amount0,\n        amount1Desired: amount1,\n        amount0Min: 0,\n        amount1Min: 0,\n        deadline: _deadline\n      })\n    );\n  }\n\n  function setStopLoss(\n    address[] memory path,\n    uint24 fee,\n    uint256 amountOut,\n    uint256 amountOutMin\n  ) external onlyOwner {\n    stopLoss = StopLoss.Order({path: path, fee: fee, amountOut: amountOut, amountOutMin: amountOutMin});\n  }\n\n  function runStopLoss(uint256 gasFee, uint256 _deadline) external tokenDeposited bill(gasFee, \"UniswapV3RestakeStopLoss\") {\n    uint256 _tokenId = tokenId;\n    INonfungiblePositionManager pm = INonfungiblePositionManager(positionManager);\n    (, , address token0, address token1, , , , uint128 liquidity, , , , ) = pm.positions(_tokenId);\n    require(liquidity > 0, \"Restake::runStopLoss: token already closed\");\n\n    pm.decreaseLiquidity(\n      INonfungiblePositionManager.DecreaseLiquidityParams({\n        tokenId: _tokenId,\n        liquidity: liquidity,\n        amount0Min: 0,\n        amount1Min: 0,\n        deadline: _deadline\n      })\n    );\n    pm.collect(\n      INonfungiblePositionManager.CollectParams({\n        tokenId: _tokenId,\n        recipient: address(this),\n        amount0Max: type(uint128).max,\n        amount1Max: type(uint128).max\n      })\n    );\n\n    address[] memory inTokens = new address[](2);\n    inTokens[0] = token0;\n    inTokens[1] = token1;\n    stopLoss.run(liquidityRouter, inTokens, _deadline);\n    IERC20 exitToken = IERC20(stopLoss.path[stopLoss.path.length - 1]);\n    exitToken.safeTransfer(owner(), exitToken.balanceOf(address(this)));\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/utils/DFH/Automate.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./proxy/ERC1167.sol\";\nimport \"./IStorage.sol\";\nimport \"./IBalance.sol\";\n\n// solhint-disable avoid-tx-origin\nabstract contract Automate {\n  using ERC1167 for address;\n\n  /// @notice Storage contract address.\n  address internal _info;\n\n  /// @notice Contract owner.\n  address internal _owner;\n\n  /// @notice Is contract paused.\n  bool internal _paused;\n\n  /// @notice Protocol fee in USD (-1 if value in global storage).\n  int256 internal _protocolFee;\n\n  /// @notice Is contract already initialized.\n  bool internal _initialized;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  event ProtocolFeeChanged(int256 protocolFee);\n\n  constructor(address __info) {\n    _info = __info;\n    _owner = tx.origin;\n    _protocolFee = -1;\n  }\n\n  /**\n   * @notice Returns address of Storage contract.\n   */\n  function info() public view returns (address) {\n    address impl = address(this).implementation();\n    if (impl == address(this)) return _info;\n\n    return Automate(impl).info();\n  }\n\n  /// @dev Modifier to protect an initializer function from being invoked twice.\n  modifier initializer() {\n    if (_owner == address(0)) {\n      _owner = tx.origin;\n      _protocolFee = -1;\n    } else {\n      require(_owner == msg.sender, \"Automate: caller is not the owner\");\n    }\n    _;\n    _initialized = true;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(_owner == msg.sender, \"Automate: caller is not the owner\");\n    _;\n  }\n\n  /**\n   * @notice Returns the address of the current owner.\n   */\n  function owner() public view returns (address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n   * Can only be called by the current owner.\n   */\n  function transferOwnership(address newOwner) external onlyOwner {\n    require(address(this).implementation() == address(this), \"Automate: change the owner failed\");\n\n    address oldOwner = _owner;\n    _owner = newOwner;\n    emit OwnershipTransferred(oldOwner, newOwner);\n  }\n\n  /**\n   * @dev Throws if called by any account other than the pauser.\n   */\n  modifier onlyPauser() {\n    if (address(this).implementation() == address(this)) {\n      address pauser = IStorage(info()).getAddress(keccak256(\"DFH:Pauser\"));\n      require(msg.sender == _owner || msg.sender == pauser, \"Automate: caller is not the pauser\");\n    } else {\n      require(msg.sender == _owner, \"Automate: caller is not the pauser\");\n    }\n    _;\n  }\n\n  /**\n   * @notice Returns true if the contract is paused, and false otherwise.\n   */\n  function paused() public view returns (bool) {\n    address impl = address(this).implementation();\n    if (impl == address(this)) return _paused;\n\n    return _paused || Automate(impl).paused();\n  }\n\n  /**\n   * @dev Throws if contract unpaused.\n   */\n  modifier whenPaused() {\n    require(paused(), \"Automate: not paused\");\n    _;\n  }\n\n  /**\n   * @dev Throws if contract paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused(), \"Automate: paused\");\n    _;\n  }\n\n  /**\n   * @notice Pause contract.\n   */\n  function pause() external onlyPauser whenNotPaused {\n    _paused = true;\n  }\n\n  /**\n   * @notice Unpause contract.\n   */\n  function unpause() external onlyPauser whenPaused {\n    _paused = false;\n  }\n\n  /**\n   * @return Current protocol fee.\n   */\n  function protocolFee() public view returns (uint256) {\n    address impl = address(this).implementation();\n    if (impl != address(this) && _protocolFee < 0) {\n      return Automate(impl).protocolFee();\n    }\n\n    IStorage __info = IStorage(info());\n    uint256 feeOnUSD = _protocolFee < 0 ? __info.getUint(keccak256(\"DFH:Fee:Automate\")) : uint256(_protocolFee);\n    if (feeOnUSD == 0) return 0;\n\n    (, int256 price, , , ) = AggregatorV3Interface(__info.getAddress(keccak256(\"DFH:Fee:PriceFeed\"))).latestRoundData();\n    require(price > 0, \"Automate: invalid price\");\n\n    return (feeOnUSD * 1e18) / uint256(price);\n  }\n\n  /**\n   * @notice Change protocol fee.\n   * @param __protocolFee New protocol fee.\n   */\n  function changeProtocolFee(int256 __protocolFee) external {\n    address impl = address(this).implementation();\n    require(\n      (impl == address(this) ? _owner : Automate(impl).owner()) == msg.sender,\n      \"Automate::changeProtocolFee: caller is not the protocol owner\"\n    );\n\n    _protocolFee = __protocolFee;\n    emit ProtocolFeeChanged(__protocolFee);\n  }\n\n  /**\n   * @dev Claim fees from owner.\n   * @param gasFee Claim gas fee.\n   * @param operation Claim description.\n   */\n  function _bill(uint256 gasFee, string memory operation) internal whenNotPaused returns (uint256) {\n    address account = owner(); // gas optimisation\n    if (tx.origin == account) return 0; // free if called by the owner\n\n    IStorage __info = IStorage(info());\n\n    address balance = __info.getAddress(keccak256(\"DFH:Contract:Balance\"));\n    require(balance != address(0), \"Automate::_bill: balance contract not found\");\n\n    return IBalance(balance).claim(account, gasFee, protocolFee(), operation);\n  }\n\n  /**\n   * @dev Claim fees from owner.\n   * @param gasFee Claim gas fee.\n   * @param operation Claim description.\n   */\n  modifier bill(uint256 gasFee, string memory operation) {\n    _bill(gasFee, operation);\n    _;\n  }\n\n  /**\n   * @notice Transfer ERC20 token to recipient.\n   * @param token The address of the token to be transferred.\n   * @param recipient Token recipient address.\n   * @param amount Transferred amount of tokens.\n   */\n  function transfer(\n    address token,\n    address recipient,\n    uint256 amount\n  ) external onlyOwner {\n    IERC20(token).transfer(recipient, amount);\n  }\n}\n"
    },
    "contracts/utils/DFH/IStorage.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\ninterface IStorage {\n  function getBytes(bytes32 key) external view returns (bytes memory);\n\n  function getBool(bytes32 key) external view returns (bool);\n\n  function getUint(bytes32 key) external view returns (uint256);\n\n  function getInt(bytes32 key) external view returns (int256);\n\n  function getAddress(bytes32 key) external view returns (address);\n\n  function getString(bytes32 key) external view returns (string memory);\n}\n"
    },
    "contracts/utils/UniswapV3/INonfungiblePositionManager.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\ninterface INonfungiblePositionManager {\n  function factory() external returns (address);\n\n  function ownerOf(uint256 tokenId) external view returns (address);\n\n  function positions(uint256 tokenId)\n    external\n    view\n    returns (\n      uint96 nonce,\n      address operator,\n      address token0,\n      address token1,\n      uint24 fee,\n      int24 tickLower,\n      int24 tickUpper,\n      uint128 liquidity,\n      uint256 feeGrowthInside0LastX128,\n      uint256 feeGrowthInside1LastX128,\n      uint128 tokensOwed0,\n      uint128 tokensOwed1\n    );\n\n  struct MintParams {\n    address token0;\n    address token1;\n    uint24 fee;\n    int24 tickLower;\n    int24 tickUpper;\n    uint256 amount0Desired;\n    uint256 amount1Desired;\n    uint256 amount0Min;\n    uint256 amount1Min;\n    address recipient;\n    uint256 deadline;\n  }\n\n  function mint(MintParams calldata params)\n    external\n    payable\n    returns (\n      uint256 tokenId,\n      uint128 liquidity,\n      uint256 amount0,\n      uint256 amount1\n    );\n\n  struct IncreaseLiquidityParams {\n    uint256 tokenId;\n    uint256 amount0Desired;\n    uint256 amount1Desired;\n    uint256 amount0Min;\n    uint256 amount1Min;\n    uint256 deadline;\n  }\n\n  function increaseLiquidity(IncreaseLiquidityParams calldata params)\n    external\n    payable\n    returns (\n      uint128 liquidity,\n      uint256 amount0,\n      uint256 amount1\n    );\n\n  struct DecreaseLiquidityParams {\n    uint256 tokenId;\n    uint128 liquidity;\n    uint256 amount0Min;\n    uint256 amount1Min;\n    uint256 deadline;\n  }\n\n  function decreaseLiquidity(DecreaseLiquidityParams calldata params)\n    external\n    payable\n    returns (uint256 amount0, uint256 amount1);\n\n  struct CollectParams {\n    uint256 tokenId;\n    address recipient;\n    uint128 amount0Max;\n    uint128 amount1Max;\n  }\n\n  function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\n\n  function burn(uint256 tokenId) external payable;\n\n  function approve(address to, uint256 tokenId) external;\n\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  ) external;\n}\n"
    },
    "contracts/utils/UniswapV3/ISwapRouter.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\ninterface ISwapRouter {\n  struct ExactInputSingleParams {\n    address tokenIn;\n    address tokenOut;\n    uint24 fee;\n    address recipient;\n    uint256 deadline;\n    uint256 amountIn;\n    uint256 amountOutMinimum;\n    uint160 sqrtPriceLimitX96;\n  }\n\n  function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n  struct ExactInputParams {\n    bytes path;\n    address recipient;\n    uint256 deadline;\n    uint256 amountIn;\n    uint256 amountOutMinimum;\n  }\n\n  function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n  struct ExactOutputSingleParams {\n    address tokenIn;\n    address tokenOut;\n    uint24 fee;\n    address recipient;\n    uint256 deadline;\n    uint256 amountOut;\n    uint256 amountInMaximum;\n    uint160 sqrtPriceLimitX96;\n  }\n\n  function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n  struct ExactOutputParams {\n    bytes path;\n    address recipient;\n    uint256 deadline;\n    uint256 amountOut;\n    uint256 amountInMaximum;\n  }\n\n  function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
    },
    "contracts/utils/UniswapV3/IFactory.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\ninterface IFactory {\n  function getPool(\n    address token0,\n    address token1,\n    uint24 fee\n  ) external returns (address);\n}\n"
    },
    "contracts/utils/UniswapV3/StopLoss.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./ISwapRouter.sol\";\n\nlibrary StopLoss {\n  using SafeERC20 for IERC20;\n\n  struct Order {\n    address[] path;\n    uint24 fee;\n    uint256 amountOut;\n    uint256 amountOutMin;\n  }\n\n  event StopLossOrderCompleted(uint256 amountOut);\n\n  function run(\n    Order storage order,\n    address liquidityRouter,\n    address[] memory inTokens,\n    uint256 _deadline\n  ) internal {\n    require(order.path.length > 1 && order.amountOut > 0, \"StopLoss::run: stop loss disabled\");\n    require(inTokens.length <= 256, \"StopLoss::run: too many tokens\");\n    for (uint8 i = 0; i < inTokens.length; i++) {\n      address token = inTokens[i];\n      if (token == order.path[0]) continue;\n      uint256 balance = IERC20(token).balanceOf(address(this));\n      if (balance == 0) continue;\n      IERC20(token).safeApprove(liquidityRouter, balance);\n      ISwapRouter(liquidityRouter).exactInput(ISwapRouter.ExactInputParams({\n        path: abi.encodePacked(token, order.fee, order.path[0]),\n        recipient: address(this),\n        deadline: _deadline,\n        amountIn: balance,\n        amountOutMinimum: 0\n      }));\n    }\n\n    address baseToken = order.path[0];\n    uint256 baseBalance = IERC20(baseToken).balanceOf(address(this));\n    uint256 amountOut;\n    if (baseToken != order.path[order.path.length - 1]) {\n      require(baseBalance > 0, \"StopLoss::run: insufficient balance of base token\");\n      IERC20(baseToken).safeApprove(liquidityRouter, baseBalance);\n      bytes memory pathBytes = abi.encodePacked(order.path[0]);\n      for (uint256 i = 1; i < order.path.length; i++) {\n          pathBytes = bytes.concat(pathBytes, abi.encodePacked(uint24(order.fee), order.path[i]));\n      }\n      amountOut = ISwapRouter(liquidityRouter).exactInput(ISwapRouter.ExactInputParams({\n          path: pathBytes,\n          recipient: address(this),\n          deadline: _deadline,\n          amountIn: baseBalance,\n          amountOutMinimum: order.amountOutMin \n      }));\n      require(amountOut <= order.amountOut, \"StopLoss::run: invalid output amount\");\n    } else {\n      amountOut = baseBalance;\n      require(amountOut <= order.amountOut, \"StopLoss::run: invalid output amount\");\n    }\n    emit StopLossOrderCompleted(amountOut);\n  }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n\n  function decimals()\n    external\n    view\n    returns (\n      uint8\n    );\n\n  function description()\n    external\n    view\n    returns (\n      string memory\n    );\n\n  function version()\n    external\n    view\n    returns (\n      uint256\n    );\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(\n    uint80 _roundId\n  )\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n}\n"
    },
    "contracts/utils/DFH/proxy/ERC1167.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\n// solhint-disable no-inline-assembly\nlibrary ERC1167 {\n  bytes public constant CLONE =\n    hex\"363d3d373d3d3d363d73bebebebebebebebebebebebebebebebebebebebe5af43d82803e903d91602b57fd5bf3\";\n\n  /**\n   * @notice Make new proxy contract.\n   * @param impl Address prototype contract.\n   * @return proxy Address new proxy contract.\n   */\n  function clone(address impl) external returns (address proxy) {\n    assembly {\n      let ptr := mload(0x40)\n      mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n      mstore(add(ptr, 0x14), shl(0x60, impl))\n      mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n      proxy := create(0, ptr, 0x37)\n    }\n    require(proxy != address(0), \"ERC1167: create failed\");\n  }\n\n  /**\n   * @notice Returns address of prototype contract for proxy.\n   * @param proxy Address proxy contract.\n   * @return impl Address prototype contract (current contract address if not proxy).\n   */\n  function implementation(address proxy) external view returns (address impl) {\n    uint256 size;\n    assembly {\n      size := extcodesize(proxy)\n    }\n\n    impl = proxy;\n    if (size <= 45 && size >= 41) {\n      bool matches = true;\n      uint256 i;\n\n      bytes memory code;\n      assembly {\n        code := mload(0x40)\n        mstore(0x40, add(code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n        mstore(code, size)\n        extcodecopy(proxy, add(code, 0x20), 0, size)\n      }\n      for (i = 0; matches && i < 9; i++) {\n        matches = code[i] == CLONE[i];\n      }\n      for (i = 0; matches && i < 15; i++) {\n        if (i == 4) {\n          matches = code[code.length - i - 1] == bytes1(uint8(CLONE[45 - i - 1]) - uint8(45 - size));\n        } else {\n          matches = code[code.length - i - 1] == CLONE[45 - i - 1];\n        }\n      }\n      if (code[9] != bytes1(0x73 - uint8(45 - size))) {\n        matches = false;\n      }\n      uint256 forwardedToBuffer;\n      if (matches) {\n        assembly {\n          forwardedToBuffer := mload(add(code, 30))\n        }\n        forwardedToBuffer &= (0x1 << (20 * 8)) - 1;\n        impl = address(uint160(forwardedToBuffer >> ((45 - size) * 8)));\n      }\n    }\n  }\n}\n"
    },
    "contracts/utils/DFH/IBalance.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\ninterface IBalance {\n  function claim(\n    address account,\n    uint256 gasFee,\n    uint256 protocolFee,\n    string memory description\n  ) external returns (uint256);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}