apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "website.fullname" . }}
  labels:
    {{- include "website.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0 # maxUnavailable define how many pods can be unavailable during the rolling update
      maxSurge: 25% # how many pods we can add at a time
  selector:
    matchLabels:
      {{- include "website.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "website.selectorLabels" . | nindent 8 }}
    spec:
      imagePullSecrets:
        - name: docker-registry-secret
      serviceAccountName: {{ include "website.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: nginx
          imagePullPolicy: Always
          image: "{{ $.Values.image.repository }}/{{ .Values.images.nginx.name }}:{{ $.Values.image.tag }}"
          terminationMessagePolicy: FallbackToLogsOnError
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 15
            timeoutSeconds: 1
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 15
            timeoutSeconds: 1
          resources:
            {{- toYaml .Values.images.nginx.resources | nindent 12 }}
        - name: app
          imagePullPolicy: Always
          image: "{{ $.Values.image.repository }}/{{ .Values.images.app.name }}:{{ $.Values.image.tag }}"
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 15
            timeoutSeconds: 1
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 15
            timeoutSeconds: 1
          volumeMounts:
            - mountPath: /app/configuration
              name: configuration
              readOnly: true
          resources:
            {{- toYaml .Values.images.app.resources | nindent 12 }}
      volumes:
        - name: configuration
          secret:
            secretName: config-secrets
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
